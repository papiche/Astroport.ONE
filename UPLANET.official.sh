#!/bin/bash
################################################################################
# Author: Fred (support@qo-op.com)
# Version: 1.1
# License: AGPL-3.0 (https://choosealicense.com/licenses/agpl-3.0/)
################################################################################
# UPLANET.official.sh
# Script de gestion des virements officiels UPlanet
# 
# G√®re deux types de virements :
# 1. LOCATAIRE : UPLANETNAME.G1 -> UPLANETNAME -> MULTIPASS (recharge de service)
# 2. SOCI√âTAIRE : UPLANETNAME.G1 -> UPLANETNAME.SOCIETY -> ZEN Card -> 3x1/3
#
# Format des r√©f√©rences blockchain :
# - RENTAL : "UPLANET:${UPLANETG1PUB:0:8}:RENTAL:${email}"
# - CAPITAL : "UPLANET:${UPLANETG1PUB:0:8}:CAPITAL:${email}:${IPFSNODEID}"
# - SOCIETY : "UPLANET:${UPLANETG1PUB:0:8}:SOCIETY:${email}:${type}:${IPFSNODEID}"
# - TREASURY: "UPLANET:${UPLANETG1PUB:0:8}:TREASURY:${email}:${type}:${IPFSNODEID}"
# - RnD     : "UPLANET:${UPLANETG1PUB:0:8}:RnD:${email}:${type}:${IPFSNODEID}"
# - ASSETS  : "UPLANET:${UPLANETG1PUB:0:8}:ASSETS:${email}:${type}:${IPFSNODEID}"
#
# L'IPFSNODEID identifie le n≈ìud/machine √† l'origine de la transaction
#
# Conformit√© : Respecte la Constitution de l'√âcosyst√®me UPlanet ·∫êEN
# S√©curit√© : V√©rification des transactions pending entre chaque transfert
################################################################################

MY_PATH="`dirname \"$0\"`"              # relative
MY_PATH="`( cd \"$MY_PATH\" && pwd )`"  # absolutized and normalized
. "${MY_PATH}/tools/my.sh"

# Configuration des montants (d√©finis dans my.sh et .env)
# Les valeurs par d√©faut sont d√©finies dans my.sh (NCARD, etc.)
# Un fichier .env peut √™tre cr√©√© √† partir de env.template pour personnaliser

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

################################################################################
# Fonctions utilitaires
################################################################################

# Fonction pour afficher l'aide
show_help() {
    echo -e "${BLUE}UPLANET.official.sh - Gestion des virements officiels UPlanet${NC}"
    echo ""
    echo "Usage:"
    echo "  $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -l, --locataire EMAIL     Virement pour locataire (recharge MULTIPASS)"
    echo "  -s, --societaire EMAIL    Virement pour soci√©taire (parts sociales)"
    echo "  -t, --type TYPE           Type de soci√©taire: satellite|constellation|infrastructure"
    echo "  -i, --infrastructure      Apport capital infrastructure (CAPTAIN ‚Üí NODE)"
    echo "  -m, --montant MONTANT     Montant en euros (optionnel, auto-calcul√© par d√©faut)"
    echo "  -r, --recovery            Mode d√©pannage: r√©cup√©ration compl√®te SOCIETY ‚Üí 3x1/3"
    echo "  --recovery-3x13           Mode d√©pannage: r√©cup√©ration partielle ZEN Card ‚Üí 3x1/3"
    echo "  -h, --help                Affiche cette aide"
    echo ""
    echo "Exemples:"
    echo "  $0 -l user@example.com -m 20                  # Recharge MULTIPASS locataire"
    echo "  $0 -s user@example.com -t satellite           # Parts sociales satellite"
    echo "  $0 -s user@example.com -t constellation       # Parts sociales constellation"
    echo "  $0 -i -m 500                                  # Apport capital infrastructure (500‚Ç¨)"
    echo "  $0 -r                                         # Mode d√©pannage SOCIETY ‚Üí 3x1/3"
    echo "  $0 --recovery-3x13                            # Mode d√©pannage ZEN Card ‚Üí 3x1/3"
    echo ""
    echo "Types de soci√©taires:"
    echo "  satellite     : 50‚Ç¨/an (sans IA)"
    echo "  constellation : 540‚Ç¨/3ans (avec IA)"
    echo "  infrastructure: 500‚Ç¨ (apport capital machine, direct vers NODE)"
}

# Fonction pour v√©rifier qu'il n'y a pas de transactions en cours avant de commencer
check_no_pending_transactions() {
    local wallet_pubkey="$1"
    local max_wait="${PENDING_WAIT_TIMEOUT:-1800}"  # 30 minutes max pour attendre les pending
    local wait_time=0
    local interval="${VERIFICATION_INTERVAL:-60}"  # 60 secondes par d√©faut
    
    echo -e "${YELLOW}üîç V√©rification qu'il n'y a pas de transactions en cours: ${wallet_pubkey:0:8}...${NC}"
    
    while [[ $wait_time -lt $max_wait ]]; do
        local balance_json=$(silkaj --json money balance "$wallet_pubkey" 2>/dev/null)
        
        if [[ $? -eq 0 ]]; then
            # silkaj retourne les montants en centimes, il faut diviser par 100
            local pending_centimes=$(echo "$balance_json" | jq -r '.balances.pending // 0' 2>/dev/null)
            local total_centimes=$(echo "$balance_json" | jq -r '.balances.total // 0' 2>/dev/null)
            local blockchain_centimes=$(echo "$balance_json" | jq -r '.balances.blockchain // 0' 2>/dev/null)
            
            # Valider les valeurs avant de les passer √† bc
            [[ -z "$pending_centimes" || "$pending_centimes" == "null" ]] && pending_centimes="0"
            [[ -z "$total_centimes" || "$total_centimes" == "null" ]] && total_centimes="0"
            [[ -z "$blockchain_centimes" || "$blockchain_centimes" == "null" ]] && blockchain_centimes="0"
            
            local pending=$(echo "scale=2; $pending_centimes / 100" | bc -l)
            local total=$(echo "scale=2; $total_centimes / 100" | bc -l)
            local blockchain=$(echo "scale=2; $blockchain_centimes / 100" | bc -l)
            
            if [[ "$pending" == "0" || "$pending" == "null" || "$pending" == "0.00" ]]; then
                # Aucune transaction en cours
                echo -e "${GREEN}‚úÖ Aucune transaction en cours - Solde stable: ${total} ƒû1${NC}"
                return 0
            else
                echo -e "${YELLOW}‚è≥ Transactions en cours... Pending: ${pending} ƒû1, Total: ${total} ƒû1 (attente: ${wait_time}s)${NC}"
            fi
        else
            echo -e "${YELLOW}‚è≥ V√©rification en cours... Impossible de r√©cup√©rer le solde (attente: ${wait_time}s)${NC}"
        fi
        
        sleep $interval
        wait_time=$((wait_time + interval))
    done
    
    echo -e "${RED}‚ùå Timeout: Des transactions sont encore en cours apr√®s ${max_wait} secondes${NC}"
    echo -e "${YELLOW}üí° Attendez que les transactions en cours se terminent avant de relancer${NC}"
    return 1
}

# Fonction pour v√©rifier le solde d'un portefeuille avec gestion du pending
check_balance() {
    local wallet_pubkey="$1"
    local max_wait="${BLOCKCHAIN_TIMEOUT:-2400}"  # 40 minutes max par d√©faut
    local wait_time=0
    local interval="${VERIFICATION_INTERVAL:-60}"  # 60 secondes par d√©faut
    
    echo -e "${YELLOW}üîç V√©rification du solde du portefeuille: ${wallet_pubkey:0:8}...${NC}"
    
    # R√©cup√©rer le solde initial (blockchain) pour calculer le solde attendu
    local initial_balance_json=$(silkaj --json money balance "$wallet_pubkey" 2>/dev/null)
    local initial_blockchain=0
    local initial_pending=0
    
    if [[ $? -eq 0 ]]; then
        # silkaj retourne les montants en centimes, il faut diviser par 100
        local initial_blockchain_centimes=$(echo "$initial_balance_json" | jq -r '.balances.blockchain // 0' 2>/dev/null)
        local initial_pending_centimes=$(echo "$initial_balance_json" | jq -r '.balances.pending // 0' 2>/dev/null)
        
        # Valider les valeurs avant de les passer √† bc
        [[ -z "$initial_blockchain_centimes" || "$initial_blockchain_centimes" == "null" ]] && initial_blockchain_centimes="0"
        [[ -z "$initial_pending_centimes" || "$initial_pending_centimes" == "null" ]] && initial_pending_centimes="0"
        
        initial_blockchain=$(echo "scale=2; $initial_blockchain_centimes / 100" | bc -l)
        initial_pending=$(echo "scale=2; $initial_pending_centimes / 100" | bc -l)
        echo -e "${CYAN}üìä Solde initial - Blockchain: ${initial_blockchain} ƒû1, Pending: ${initial_pending} ƒû1${NC}"
    else
        echo -e "${RED}‚ùå Impossible de r√©cup√©rer le solde initial${NC}"
        return 1
    fi
    
    while [[ $wait_time -lt $max_wait ]]; do
        local balance_json=$(silkaj --json money balance "$wallet_pubkey" 2>/dev/null)
        
        if [[ $? -eq 0 ]]; then
            # silkaj retourne les montants en centimes, il faut diviser par 100
            local pending_centimes=$(echo "$balance_json" | jq -r '.balances.pending // 0' 2>/dev/null)
            local total_centimes=$(echo "$balance_json" | jq -r '.balances.total // 0' 2>/dev/null)
            local blockchain_centimes=$(echo "$balance_json" | jq -r '.balances.blockchain // 0' 2>/dev/null)
            
            # Valider les valeurs avant de les passer √† bc
            [[ -z "$pending_centimes" || "$pending_centimes" == "null" ]] && pending_centimes="0"
            [[ -z "$total_centimes" || "$total_centimes" == "null" ]] && total_centimes="0"
            [[ -z "$blockchain_centimes" || "$blockchain_centimes" == "null" ]] && blockchain_centimes="0"
            
            local pending=$(echo "scale=2; $pending_centimes / 100" | bc -l)
            local total=$(echo "scale=2; $total_centimes / 100" | bc -l)
            local blockchain=$(echo "scale=2; $blockchain_centimes / 100" | bc -l)
            
            if [[ "$pending" == "0" || "$pending" == "null" || "$pending" == "0.00" ]]; then
                # Quand pending = 0, la transaction est confirm√©e
                # Le solde total devrait √™tre stable
                echo -e "${GREEN}‚úÖ Transaction confirm√©e - Solde: ${total} ƒû1${NC}"
                return 0
            else
                echo -e "${YELLOW}‚è≥ Transaction en cours... Pending: ${pending} ƒû1, Total: ${total} ƒû1 (attente: ${wait_time}s)${NC}"
            fi
        else
            echo -e "${YELLOW}‚è≥ Transaction en cours... Impossible de r√©cup√©rer le solde (attente: ${wait_time}s)${NC}"
        fi
        
        sleep $interval
        wait_time=$((wait_time + interval))
    done
    
    echo -e "${RED}‚ùå Timeout: La transaction n'a pas √©t√© confirm√©e dans les 40 minutes${NC}"
    
    # Envoyer une alerte de timeout
    send_alert "BLOCKCHAIN_TIMEOUT" "$USER_EMAIL" "$TRANSACTION_TYPE" "$TRANSACTION_AMOUNT" "$CURRENT_STEP" "Transaction timeout after ${max_wait} seconds. Wallet: ${wallet_pubkey:0:8}..."
    
    return 1
}

# Fonction pour convertir ·∫êen en ƒû1
# Taux standard : 1·∫ê = 0.1ƒû1 (ou 10·∫ê = 1ƒû1)
# Note : Cette fonction convertit pour les transactions blockchain
# L'historique d√©duit automatiquement 1ƒû1 de primo-transaction √† la lecture
# Exemple : 50·∫ê √† transf√©rer = 5ƒû1 sur blockchain (sans 1ƒû1 primo qui est d√©j√† d√©duit)
zen_to_g1() {
    local zen_amount="$1"
    
    # Valider que l'entr√©e est un nombre
    if [[ -z "$zen_amount" ]] || ! [[ "$zen_amount" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
        echo "0"
        return 1
    fi
    
    echo "scale=2; $zen_amount / 10" | bc -l
}

# Note: Les mises √† jour DID sont maintenant g√©r√©es directement par did_manager_nostr.sh
# qui publie sur Nostr et inclut automatiquement la cr√©ation des fichiers U.SOCIETY pour les soci√©taires

# Fonction pour envoyer une alerte par email au CAPTAINEMAIL
send_alert() {
    local alert_type="$1"
    local email="$2"
    local type="$3"
    local montant="$4"
    local step="$5"
    local error_details="$6"
    
    # V√©rifier que CAPTAINEMAIL est d√©fini
    if [[ -z "$CAPTAINEMAIL" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  CAPTAINEMAIL non d√©fini, impossible d'envoyer l'alerte${NC}"
        return 1
    fi
    
    # Cr√©er le fichier d'alerte HTML
    local alert_file="$HOME/.zen/tmp/uplanet_alert_$(date +%Y%m%d_%H%M%S).html"
    
    cat > "$alert_file" << EOF
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>üö® UPLANET Transaction Alert</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .alert { background-color: #ffebee; border-left: 5px solid #f44336; padding: 15px; margin: 10px 0; }
        .info { background-color: #e3f2fd; border-left: 5px solid #2196f3; padding: 15px; margin: 10px 0; }
        .details { background-color: #f5f5f5; padding: 10px; border-radius: 5px; font-family: monospace; }
        h1 { color: #f44336; }
        h2 { color: #1976d2; }
    </style>
</head>
<body>
    <h1>üö® ALERTE TRANSACTION UPLANET</h1>
    
    <div class="alert">
        <h2>√âchec de Transaction</h2>
        <p><strong>Type d'alerte:</strong> ${alert_type}</p>
        <p><strong>Date/Heure:</strong> $(date '+%Y-%m-%d %H:%M:%S UTC')</p>
    </div>
    
    <div class="info">
        <h2>D√©tails de la Transaction</h2>
        <p><strong>Email utilisateur:</strong> ${email}</p>
        <p><strong>Type de virement:</strong> ${type}</p>
        <p><strong>Montant:</strong> ${montant} ·∫êen ($(zen_to_g1 "$montant") ƒû1)</p>
        <p><strong>√âtape √©chou√©e:</strong> ${step}</p>
    </div>
    
    <div class="details">
        <h2>D√©tails de l'Erreur</h2>
        <pre>${error_details}</pre>
    </div>
    
    <div class="info">
        <h2>Actions Recommand√©es</h2>
        <ul>
            <li>V√©rifier la connectivit√© blockchain</li>
            <li>Contr√¥ler les soldes des portefeuilles interm√©diaires</li>
            <li>Reprendre manuellement la transaction si n√©cessaire</li>
            <li>Contacter l'utilisateur: ${email}</li>
        </ul>
    </div>
    
    <hr>
    <p><small>Alerte g√©n√©r√©e automatiquement par UPLANET.official.sh</small></p>
</body>
</html>
EOF
    
    # Envoyer l'alerte via mailjet.sh
    echo -e "${YELLOW}üìß Envoi d'alerte √† ${CAPTAINEMAIL}...${NC}"
    if "${MY_PATH}/tools/mailjet.sh" "$CAPTAINEMAIL" "$alert_file" "üö® UPLANET Transaction Failed - ${alert_type}"; then
        echo -e "${GREEN}‚úÖ Alerte envoy√©e avec succ√®s √† ${CAPTAINEMAIL}${NC}"
        # Garder le fichier d'alerte pour les logs
        mkdir -p "$HOME/.zen/tmp/alerts/"
        mv "$alert_file" "$HOME/.zen/tmp/alerts/"
        return 0
    else
        echo -e "${RED}‚ùå √âchec de l'envoi d'alerte √† ${CAPTAINEMAIL}${NC}"
        return 1
    fi
}

# Fonction pour effectuer un transfert et v√©rifier sa confirmation
transfer_and_verify() {
    local dunikey_file="$1"
    local to_wallet="$2"
    local zen_amount="$3"
    local description="$4"
    local user_email="$5"
    local transaction_type="$6"
    local step_name="$7"
    
    # Convertir ·∫êen en ƒû1 (1 ·∫êen = 0.1 ƒû1)
    local g1_amount=$(zen_to_g1 "$zen_amount")
    
    echo -e "${BLUE}üí∞ Transfert: ${zen_amount} ·∫êen (${g1_amount} ƒû1) vers ${to_wallet:0:8}${NC}"
    echo -e "${CYAN}üìù Description: ${description}${NC}"
    
    # Effectuer le transfert avec silkaj en utilisant le fichier dunikey
    local transfer_result
    if [[ -n "$dunikey_file" && -f "$dunikey_file" ]]; then
        transfer_result=$(silkaj --json --dunikey-file "$dunikey_file" money transfer -r "$to_wallet" -a "$g1_amount" --reference "$description" --yes 2>/dev/null)
    else
        echo -e "${RED}‚ùå Fichier dunikey manquant ou invalide: $dunikey_file${NC}"
        send_alert "DUNIKEY_ERROR" "$user_email" "$transaction_type" "$zen_amount" "$step_name" "Fichier dunikey manquant ou invalide: $dunikey_file"
        return 1
    fi
    
    if [[ $? -eq 0 ]]; then
        echo -e "${GREEN}‚úÖ Transfert initi√© avec succ√®s${NC}"
        
        # Attendre la confirmation sur le wallet source
        local source_pubkey=$(cat "$dunikey_file" | grep 'pub:' | cut -d ' ' -f 2)
        if [[ -n "$source_pubkey" ]]; then
            # D√©finir les variables globales pour check_balance
            export USER_EMAIL="$user_email"
            export TRANSACTION_TYPE="$transaction_type"
            export TRANSACTION_AMOUNT="$zen_amount"
            export CURRENT_STEP="$step_name"
            
            if check_balance "$source_pubkey"; then
                return 0
            else
                return 1
            fi
        else
            echo -e "${RED}‚ùå Impossible de r√©cup√©rer la cl√© publique depuis le fichier dunikey${NC}"
            send_alert "PUBKEY_ERROR" "$user_email" "$transaction_type" "$zen_amount" "$step_name" "Impossible de r√©cup√©rer la cl√© publique depuis: $dunikey_file"
            return 1
        fi
    else
        echo -e "${RED}‚ùå Erreur lors du transfert${NC}"
        echo "$transfer_result"
        send_alert "TRANSFER_ERROR" "$user_email" "$transaction_type" "$zen_amount" "$step_name" "Erreur silkaj: $transfer_result"
        return 1
    fi
}

# Fonction pour calculer le montant en ·∫êen bas√© sur le type de soci√©taire
calculate_societaire_amount() {
    local type="$1"
    
    case "$type" in
        "satellite")
            echo "${ZENCARD_SATELLITE:-50}"  # 50‚Ç¨ = 50 ·∫êen (valeur par d√©faut)
            ;;
        "constellation")
            echo "${ZENCARD_CONSTELLATION:-540}" # 540‚Ç¨ = 540 ·∫êen (valeur par d√©faut)
            ;;
        "infrastructure")
            echo "${MACHINE_VALUE_ZEN:-500}" # 500‚Ç¨ = 500 ·∫êen (apport capital machine)
            ;;
        *)
            echo "0"
            ;;
    esac
}

################################################################################
# Fonction principale pour virement locataire
################################################################################
process_locataire() {
    local email="$1"
    local montant_euros="${2:-${NCARD:-50}}"
    
    # Valider que le montant est un nombre valide
    if [[ -z "$montant_euros" ]] || ! [[ "$montant_euros" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
        echo -e "${RED}‚ùå Montant invalide: '$montant_euros'${NC}"
        echo -e "${YELLOW}üí° Utilisez un nombre positif (ex: 50)${NC}"
        return 1
    fi
    
    local montant_g1=$(zen_to_g1 "$montant_euros")
    
    echo -e "${BLUE}üè† Traitement virement LOCATAIRE pour: ${email}${NC}"
    echo -e "${CYAN}üí∞ Montant: ${montant_euros} ·∫êen = ${montant_g1} ƒû1${NC}"
    
    # V√©rifier que les portefeuilles existent
    if [[ ! -f "$HOME/.zen/tmp/UPLANETNAME_G1" ]]; then
        echo -e "${RED}‚ùå Portefeuille UPLANETNAME.G1 non configur√©${NC}"
        echo "üí° Utilisez zen.sh ‚Üí UPLANETNAME.G1 pour configurer"
        return 1
    fi
    
    if [[ ! -f "$HOME/.zen/tmp/UPLANETG1PUB" ]]; then
        echo -e "${RED}‚ùå Portefeuille UPLANETNAME non configur√©${NC}"
        echo "üí° Utilisez zen.sh ‚Üí UPLANETNAME pour configurer"
        return 1
    fi
    
    # R√©cup√©rer les cl√©s publiques
    local g1_pubkey=$(cat "$HOME/.zen/tmp/UPLANETNAME_G1")
    local uplanet_pubkey=$(cat "$HOME/.zen/tmp/UPLANETG1PUB")
    local multipass_pubkey=$(cat ~/.zen/game/nostr/${email}/G1PUBNOSTR)
    
    echo -e "${YELLOW}üîë Portefeuilles identifi√©s:${NC}"
    echo -e "  UPLANETNAME.G1: ${g1_pubkey:0:8}..."
    echo -e "  UPLANETNAME: ${uplanet_pubkey:0:8}..."
    echo -e "  MULTIPASS ${email}: ${multipass_pubkey:0:8}..."
    
    # V√©rifier qu'il n'y a pas de transactions en cours avant de commencer
    echo -e "${BLUE}üîç V√©rification pr√©alable des transactions en cours...${NC}"
    if ! check_no_pending_transactions "$g1_pubkey"; then
        echo -e "${RED}‚ùå Impossible de commencer le virement: des transactions sont en cours${NC}"
        echo -e "${YELLOW}üí° Attendez que les transactions en cours se terminent avant de relancer${NC}"
        return 1
    fi
    
    # √âtape 1: UPLANETNAME.G1 -> UPLANETNAME
    echo -e "${BLUE}üì§ √âtape 1: Transfert UPLANETNAME.G1 ‚Üí UPLANETNAME${NC}"
    if ! transfer_and_verify "$HOME/.zen/game/uplanet.G1.dunikey" "$uplanet_pubkey" "$montant_euros" "UPLANET:${UPLANETG1PUB:0:8}:RENTAL:${email}" "$email" "LOCATAIRE" "√âtape 1: G1‚ÜíUPLANET"; then
        echo -e "${RED}‚ùå √âchec de l'√©tape 1${NC}"
        return 1
    fi
    
    # √âtape 2: UPLANETNAME -> MULTIPASS
    echo -e "${BLUE}üì§ √âtape 2: Transfert UPLANETNAME ‚Üí MULTIPASS ${email}${NC}"
    if ! transfer_and_verify "$HOME/.zen/game/uplanet.dunikey" "$multipass_pubkey" "$montant_euros" "UPLANET:${UPLANETG1PUB:0:8}:RENTAL:${email}" "$email" "LOCATAIRE" "√âtape 2: UPLANET‚ÜíMULTIPASS"; then
        echo -e "${RED}‚ùå √âchec de l'√©tape 2${NC}"
        return 1
    fi
    
    echo -e "${GREEN}üéâ Virement locataire termin√© avec succ√®s!${NC}"
    echo -e "${CYAN}üìä R√©sum√©:${NC}"
    echo -e "  ‚Ä¢ ${montant_euros} ·∫êen (${montant_g1} ƒû1) transf√©r√©s vers MULTIPASS ${email}"
    echo -e "  ‚Ä¢ Recharge de service hebdomadaire effectu√©e"
    echo -e "  ‚Ä¢ Toutes les transactions confirm√©es sur la blockchain"
    
    # Mettre √† jour le document DID avec les nouvelles capacit√©s
    "${MY_PATH}/tools/did_manager_nostr.sh" update "$email" "LOCATAIRE" "$montant_euros" "$montant_g1"
    
    return 0
}

################################################################################
# Fonction pour apport capital infrastructure (pas de 3x1/3)
################################################################################
process_infrastructure() {
    local email="$1"
    local montant_euros="${2:-$(calculate_societaire_amount "infrastructure")}"
    
    # Valider que le montant est un nombre valide
    if [[ -z "$montant_euros" ]] || ! [[ "$montant_euros" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
        echo -e "${RED}‚ùå Montant invalide: '$montant_euros'${NC}"
        echo -e "${YELLOW}üí° Utilisez un nombre positif (ex: 500)${NC}"
        return 1
    fi
    
    local montant_g1=$(zen_to_g1 "$montant_euros")
    
    echo -e "${BLUE}‚öôÔ∏è Traitement APPORT CAPITAL INFRASTRUCTURE pour: ${email}${NC}"
    echo -e "${CYAN}üí∞ Montant: ${montant_euros} ·∫êen = ${montant_g1} ƒû1 - DIRECT vers NODE${NC}"
    
    # V√©rifier que les portefeuilles existent
    if [[ ! -f "$HOME/.zen/tmp/UPLANETNAME_G1" ]]; then
        echo -e "${RED}‚ùå Portefeuille UPLANETNAME.G1 non configur√©${NC}"
        echo "üí° Utilisez zen.sh ‚Üí UPLANETNAME.G1 pour configurer"
        return 1
    fi
    
    # R√©cup√©rer les cl√©s publiques
    local g1_pubkey=$(cat "$HOME/.zen/tmp/UPLANETNAME_G1")
    
    # R√©cup√©rer la cl√© ZEN Card du capitaine
    local zencard_pubkey=""
    local zencard_dunikey="$HOME/.zen/game/players/${email}/secret.dunikey"
    local zencard_g1pub="$HOME/.zen/game/players/${email}/.g1pub"
    
    if [[ -f "$zencard_dunikey" ]]; then
        zencard_pubkey=$(cat "$zencard_dunikey" | grep "pub:" | cut -d ' ' -f 2)
        echo -e "${GREEN}‚úÖ ZEN Card trouv√©e: ${zencard_pubkey:0:8}...${NC}"
    elif [[ -f "$zencard_g1pub" ]]; then
        zencard_pubkey=$(cat "$zencard_g1pub")
        echo -e "${GREEN}‚úÖ ZEN Card trouv√©e (g1pub): ${zencard_pubkey:0:8}...${NC}"
    else
        echo -e "${RED}‚ùå ZEN Card non trouv√©e pour ${email}${NC}"
        echo -e "${CYAN}üí° V√©rifiez que le dossier ~/.zen/game/players/${email}/ existe${NC}"
        return 1
    fi
    
    # R√©cup√©rer la cl√© NODE
    local node_pubkey=""
    if [[ -f "$HOME/.zen/game/secret.NODE.dunikey" ]]; then
        node_pubkey=$(cat "$HOME/.zen/game/secret.NODE.dunikey" | grep "pub:" | cut -d ' ' -f 2)
        echo -e "${GREEN}‚úÖ NODE trouv√©: ${node_pubkey:0:8}...${NC}"
    else
        echo -e "${RED}‚ùå Portefeuille NODE non trouv√©: ~/.zen/game/secret.NODE.dunikey${NC}"
        echo -e "${CYAN}üí° Ex√©cutez UPLANET.init.sh pour cr√©er le portefeuille NODE${NC}"
        return 1
    fi
    
    echo -e "${YELLOW}üîë Portefeuilles identifi√©s:${NC}"
    echo -e "  UPLANETNAME.G1: ${g1_pubkey:0:8}..."
    echo -e "  ZEN Card ${email}: ${zencard_pubkey:0:8}..."
    echo -e "  NODE (Armateur): ${node_pubkey:0:8}..."
    
    # V√©rifier qu'il n'y a pas de transactions en cours avant de commencer
    echo -e "${BLUE}üîç V√©rification pr√©alable des transactions en cours...${NC}"
    if ! check_no_pending_transactions "$g1_pubkey"; then
        echo -e "${RED}‚ùå Impossible de commencer le virement: des transactions sont en cours${NC}"
        echo -e "${YELLOW}üí° Attendez que les transactions en cours se terminent avant de relancer${NC}"
        return 1
    fi
    
    # √âtape 1: UPLANETNAME.G1 -> ZEN Card
    echo -e "${BLUE}üì§ √âtape 1: Transfert UPLANETNAME.G1 ‚Üí ZEN Card ${email}${NC}"
    if ! transfer_and_verify "$HOME/.zen/game/uplanet.G1.dunikey" "$zencard_pubkey" "$montant_euros" "UPLANET:${UPLANETG1PUB:0:8}:CAPITAL:${email}:${IPFSNODEID}" "$email" "INFRASTRUCTURE" "√âtape 1: G1‚ÜíZENCARD"; then
        echo -e "${RED}‚ùå √âchec de l'√©tape 1${NC}"
        return 1
    fi
    
    # √âtape 2: ZEN Card -> NODE (DIRECT, pas de 3x1/3)
    echo -e "${BLUE}üì§ √âtape 2: Transfert ZEN Card ‚Üí NODE (APPORT CAPITAL)${NC}"
    if ! transfer_and_verify "$zencard_dunikey" "$node_pubkey" "$montant_euros" "UPLANET:${UPLANETG1PUB:0:8}:CAPITAL:${email}:${IPFSNODEID}" "$email" "INFRASTRUCTURE" "√âtape 2: ZENCARD‚ÜíNODE"; then
        echo -e "${RED}‚ùå √âchec de l'√©tape 2${NC}"
        return 1
    fi
    
    echo -e "${GREEN}üéâ Apport capital infrastructure termin√© avec succ√®s!${NC}"
    echo -e "${CYAN}üìä R√©sum√©:${NC}"
    echo -e "  ‚Ä¢ ${montant_euros} ·∫êen (${montant_g1} ƒû1) transf√©r√©s directement au NODE"
    echo -e "  ‚Ä¢ Apport au capital (non distribuable 3x1/3)"
    echo -e "  ‚Ä¢ Valorisation infrastructure/machine enregistr√©e"
    echo -e "  ‚Ä¢ Toutes les transactions confirm√©es sur la blockchain"
    echo -e "  ‚Ä¢ ‚úÖ Coh√©rence avec OpenCollective UPlanet ·∫êen maintenue"
    
    # Mettre √† jour le document DID avec le statut contributeur infrastructure
    "${MY_PATH}/tools/did_manager_nostr.sh" update "$email" "INFRASTRUCTURE" "$montant_euros" "$montant_g1"
    
    return 0
}

################################################################################
# Fonction principale pour virement soci√©taire
################################################################################
process_societaire() {
    local email="$1"
    local type="$2"
    local montant_euros="${3:-$(calculate_societaire_amount "$type")}"
    
    # Valider que le montant est un nombre valide
    if [[ -z "$montant_euros" ]] || ! [[ "$montant_euros" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
        echo -e "${RED}‚ùå Montant invalide: '$montant_euros'${NC}"
        echo -e "${YELLOW}üí° Utilisez un nombre positif (ex: 50 pour satellite, 540 pour constellation)${NC}"
        return 1
    fi
    
    # Cas sp√©cial : apport capital infrastructure (pas de 3x1/3)
    if [[ "$type" == "infrastructure" ]]; then
        process_infrastructure "$email" "$montant_euros"
        return $?
    fi
    
    local montant_g1=$(zen_to_g1 "$montant_euros")
    
    echo -e "${BLUE}üëë Traitement virement SOCI√âTAIRE pour: ${email}${NC}"
    echo -e "${CYAN}üí∞ Type: ${type} - Montant: ${montant_euros} ·∫êen = ${montant_g1} ƒû1${NC}"
    
    # V√©rifier que les portefeuilles existent
    if [[ ! -f "$HOME/.zen/tmp/UPLANETNAME_G1" ]]; then
        echo -e "${RED}‚ùå Portefeuille UPLANETNAME.G1 non configur√©${NC}"
        echo "üí° Utilisez zen.sh ‚Üí UPLANETNAME.G1 pour configurer"
        return 1
    fi
    
    if [[ ! -f "$HOME/.zen/tmp/UPLANETNAME_SOCIETY" ]]; then
        echo -e "${RED}‚ùå Portefeuille UPLANETNAME.SOCIETY non configur√©${NC}"
        echo "üí° Utilisez zen.sh ‚Üí UPLANETNAME.SOCIETY pour configurer"
        return 1
    fi
    
    # R√©cup√©rer les cl√©s publiques
    local g1_pubkey=$(cat "$HOME/.zen/tmp/UPLANETNAME_G1")
    local society_pubkey=$(cat "$HOME/.zen/tmp/UPLANETNAME_SOCIETY")
    
    # R√©cup√©rer la cl√© ZEN Card du soci√©taire depuis son dossier player
    local zencard_pubkey=""
    local zencard_dunikey="$HOME/.zen/game/players/${email}/secret.dunikey"
    local zencard_g1pub="$HOME/.zen/game/players/${email}/.g1pub"
    
    if [[ -f "$zencard_dunikey" ]]; then
        zencard_pubkey=$(cat "$zencard_dunikey" | grep "pub:" | cut -d ' ' -f 2)
        echo -e "${GREEN}‚úÖ ZEN Card trouv√©e: ${zencard_pubkey:0:8}...${NC}"
    elif [[ -f "$zencard_g1pub" ]]; then
        zencard_pubkey=$(cat "$zencard_g1pub")
        echo -e "${GREEN}‚úÖ ZEN Card trouv√©e (g1pub): ${zencard_pubkey:0:8}...${NC}"
    else
        echo -e "${RED}‚ùå ZEN Card non trouv√©e pour ${email}${NC}"
        echo -e "${CYAN}üí° V√©rifiez que le dossier ~/.zen/game/players/${email}/ existe${NC}"
        return 1
    fi
    
    echo -e "${YELLOW}üîë Portefeuilles identifi√©s:${NC}"
    echo -e "  UPLANETNAME.G1: ${g1_pubkey:0:8}..."
    echo -e "  UPLANETNAME.SOCIETY: ${society_pubkey:0:8}..."
    echo -e "  ZEN Card ${email}: ${zencard_pubkey:0:8}..."
    
    # V√©rifier qu'il n'y a pas de transactions en cours avant de commencer
    echo -e "${BLUE}üîç V√©rification pr√©alable des transactions en cours...${NC}"
    if ! check_no_pending_transactions "$g1_pubkey"; then
        echo -e "${RED}‚ùå Impossible de commencer le virement: des transactions sont en cours${NC}"
        echo -e "${YELLOW}üí° Attendez que les transactions en cours se terminent avant de relancer${NC}"
        return 1
    fi
    
    # √âtape 1: UPLANETNAME.G1 -> UPLANETNAME.SOCIETY
    echo -e "${BLUE}üì§ √âtape 1: Transfert UPLANETNAME.G1 ‚Üí UPLANETNAME.SOCIETY${NC}"
    if ! transfer_and_verify "$HOME/.zen/game/uplanet.G1.dunikey" "$society_pubkey" "$montant_euros" "UPLANET:${UPLANETG1PUB:0:8}:SOCIETY:${email}:${type}:${IPFSNODEID}" "$email" "SOCIETAIRE_${type^^}" "√âtape 1: G1‚ÜíSOCIETY"; then
        echo -e "${RED}‚ùå √âchec de l'√©tape 1${NC}"
        return 1
    fi
    
    # √âtape 2: UPLANETNAME.SOCIETY -> ZEN Card
    echo -e "${BLUE}üì§ √âtape 2: Transfert UPLANETNAME.SOCIETY ‚Üí ZEN Card ${email}${NC}"
    if ! transfer_and_verify "$HOME/.zen/game/uplanet.SOCIETY.dunikey" "$zencard_pubkey" "$montant_euros" "UPLANET:${UPLANETG1PUB:0:8}:SOCIETY:${email}:${type}:${IPFSNODEID}" "$email" "SOCIETAIRE_${type^^}" "√âtape 2: SOCIETY‚ÜíZENCARD"; then
        echo -e "${RED}‚ùå √âchec de l'√©tape 2${NC}"
        return 1
    fi
    
    # √âtape 3: R√©partition 3x1/3 depuis ZEN Card
    echo -e "${BLUE}üì§ √âtape 3: R√©partition 3x1/3 depuis ZEN Card${NC}"
    
    # Calculer les montants de r√©partition (en ·∫êen pour l'affichage, en ƒû1 pour les transferts)
    local montant_zen=$montant_euros
    local part_treasury_zen=$(echo "scale=2; $montant_zen / 3" | bc)
    local part_rnd_zen=$(echo "scale=2; $montant_zen / 3" | bc)
    local part_assets_zen=$(echo "scale=2; $montant_zen - $part_treasury_zen - $part_rnd_zen" | bc)
    
    # Utiliser les m√™mes portefeuilles que ZEN.COOPERATIVE.3x1-3.sh
    local treasury_pubkey=""
    local rnd_pubkey=""
    local assets_pubkey=""
    
    # Treasury (CASH)
    if [[ -f "$HOME/.zen/game/uplanet.CASH.dunikey" ]]; then
        treasury_pubkey=$(cat "$HOME/.zen/game/uplanet.CASH.dunikey" | grep "pub:" | cut -d ' ' -f 2)
        echo -e "${GREEN}‚úÖ Treasury trouv√©: ${treasury_pubkey:0:8}...${NC}"
    else
        echo -e "${RED}‚ùå Portefeuille Treasury non trouv√©: ~/.zen/game/uplanet.CASH.dunikey${NC}"
        echo -e "${CYAN}üí° Ex√©cutez ZEN.COOPERATIVE.3x1-3.sh pour cr√©er les portefeuilles coop√©ratifs${NC}"
        return 1
    fi
    
    # R&D
    if [[ -f "$HOME/.zen/game/uplanet.RnD.dunikey" ]]; then
        rnd_pubkey=$(cat "$HOME/.zen/game/uplanet.RnD.dunikey" | grep "pub:" | cut -d ' ' -f 2)
        echo -e "${GREEN}‚úÖ R&D trouv√©: ${rnd_pubkey:0:8}...${NC}"
    else
        echo -e "${RED}‚ùå Portefeuille R&D non trouv√©: ~/.zen/game/uplanet.RnD.dunikey${NC}"
        echo -e "${CYAN}üí° Ex√©cutez ZEN.COOPERATIVE.3x1-3.sh pour cr√©er les portefeuilles coop√©ratifs${NC}"
        return 1
    fi
    
    # Assets
    if [[ -f "$HOME/.zen/game/uplanet.ASSETS.dunikey" ]]; then
        assets_pubkey=$(cat "$HOME/.zen/game/uplanet.ASSETS.dunikey" | grep "pub:" | cut -d ' ' -f 2)
        echo -e "${GREEN}‚úÖ Assets trouv√©: ${assets_pubkey:0:8}...${NC}"
    else
        echo -e "${RED}‚ùå Portefeuille Assets non trouv√©: ~/.zen/game/uplanet.ASSETS.dunikey${NC}"
        echo -e "${CYAN}üí° Ex√©cutez ZEN.COOPERATIVE.3x1-3.sh pour cr√©er les portefeuilles coop√©ratifs${NC}"
        return 1
    fi
    
    # Transfert vers Treasury (1/3)
    echo -e "${CYAN}  üì§ Treasury (1/3): ${part_treasury_zen} ·∫êen${NC}"
    if ! transfer_and_verify "$zencard_dunikey" "$treasury_pubkey" "$part_treasury_zen" "UPLANET:${UPLANETG1PUB:0:8}:TREASURY:${email}:${type}:${IPFSNODEID}" "$email" "SOCIETAIRE_${type^^}" "√âtape 3a: ZENCARD‚ÜíTREASURY"; then
        echo -e "${RED}‚ùå √âchec transfert Treasury${NC}"
        return 1
    fi
    
    # Mettre √† jour DID pour contribution Treasury
    "${MY_PATH}/tools/did_manager_nostr.sh" update "$email" "TREASURY_CONTRIBUTION" "$part_treasury_zen" "$(zen_to_g1 "$part_treasury_zen")"
    
    # Transfert vers R&D (1/3)
    echo -e "${CYAN}  üì§ R&D (1/3): ${part_rnd_zen} ·∫êen${NC}"
    if ! transfer_and_verify "$zencard_dunikey" "$rnd_pubkey" "$part_rnd_zen" "UPLANET:${UPLANETG1PUB:0:8}:RnD:${email}:${type}:${IPFSNODEID}" "$email" "SOCIETAIRE_${type^^}" "√âtape 3b: ZENCARD‚ÜíRND"; then
        echo -e "${RED}‚ùå √âchec transfert R&D${NC}"
        return 1
    fi
    
    # Mettre √† jour DID pour contribution R&D
    "${MY_PATH}/tools/did_manager_nostr.sh" update "$email" "RND_CONTRIBUTION" "$part_rnd_zen" "$(zen_to_g1 "$part_rnd_zen")"
    
    # Transfert vers Assets (1/3)
    echo -e "${CYAN}  üì§ Assets (1/3): ${part_assets_zen} ·∫êen${NC}"
    if ! transfer_and_verify "$zencard_dunikey" "$assets_pubkey" "$part_assets_zen" "UPLANET:${UPLANETG1PUB:0:8}:ASSETS:${email}:${type}:${IPFSNODEID}" "$email" "SOCIETAIRE_${type^^}" "√âtape 3c: ZENCARD‚ÜíASSETS"; then
        echo -e "${RED}‚ùå √âchec transfert Assets${NC}"
        return 1
    fi
    
    # Mettre √† jour DID pour contribution Assets
    "${MY_PATH}/tools/did_manager_nostr.sh" update "$email" "ASSETS_CONTRIBUTION" "$part_assets_zen" "$(zen_to_g1 "$part_assets_zen")"
    
    echo -e "${GREEN}üéâ Virement soci√©taire termin√© avec succ√®s!${NC}"
    echo -e "${CYAN}üìä R√©sum√©:${NC}"
    echo -e "  ‚Ä¢ ${montant_euros} ·∫êen transf√©r√©s vers ZEN Card ${email}"
    echo -e "  ‚Ä¢ Parts sociales attribu√©es (type: ${type})"
    echo -e "  ‚Ä¢ R√©partition 3x1/3 effectu√©e:"
    echo -e "    - Treasury: ${part_treasury_zen} ·∫êen"
    echo -e "    - R&D: ${part_rnd_zen} ·∫êen"
    echo -e "    - Assets: ${part_assets_zen} ·∫êen"
    echo -e "  ‚Ä¢ Toutes les transactions confirm√©es sur la blockchain"
    
    # Mettre √† jour le document DID avec le statut de soci√©taire
    local contract_type="SOCIETAIRE_${type^^}"
    "${MY_PATH}/tools/did_manager_nostr.sh" update "$email" "$contract_type" "$montant_euros" "$montant_g1"
    
    # Validate France Connect compliance for ZEN Card holders (KYC verified)
    # Check if user has WoT verification (0.01ƒû1 transaction from Duniter forgeron)
    local wot_verified=false
    if [[ -f "$HOME/.zen/tmp/coucou/${zencard_pubkey}.2nd" ]]; then
        wot_verified=true
        echo -e "${GREEN}‚úÖ WoT verification detected (KYC completed)${NC}"
    fi
    
    # Only validate France Connect for French users with KYC verification
    if [[ "$wot_verified" == "true" ]]; then
        local user_lang=$(cat "$HOME/.zen/game/nostr/${email}/LANG" 2>/dev/null || echo "fr")
        if [[ "$user_lang" == "fr" ]]; then
            echo -e "${CYAN}üá´üá∑ Validating France Connect compliance for KYC-verified French user...${NC}"
            "${MY_PATH}/tools/did_manager_nostr.sh" validate-france-connect "$email"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  France Connect validation skipped - KYC verification required (WoT transaction)${NC}"
    fi
    
    return 0
}

################################################################################
# Fonction de d√©pannage pour r√©cup√©ration manuelle depuis SOCIETY
# Flux correct: SOCIETY ‚Üí ZEN Card ‚Üí 3x1/3 (TREASURY, RnD, ASSETS)
################################################################################
process_recovery() {
    echo -e "${YELLOW}üîß MODE D√âPANNAGE - R√©cup√©ration manuelle depuis SOCIETY${NC}"
    echo -e "${CYAN}üìã Flux: SOCIETY ‚Üí ZEN Card ‚Üí 3x1/3 (TREASURY, RnD, ASSETS)${NC}"
    echo ""
    
    # V√©rifier que le portefeuille SOCIETY existe
    if [[ ! -f "$HOME/.zen/game/uplanet.SOCIETY.dunikey" ]]; then
        echo -e "${RED}‚ùå Portefeuille UPLANETNAME.SOCIETY non trouv√©${NC}"
        echo -e "${CYAN}üí° Fichier attendu: ~/.zen/game/uplanet.SOCIETY.dunikey${NC}"
        return 1
    fi
    
    # R√©cup√©rer la cl√© publique SOCIETY
    local society_pubkey=$(cat "$HOME/.zen/game/uplanet.SOCIETY.dunikey" | grep "pub:" | cut -d ' ' -f 2)
    if [[ -z "$society_pubkey" ]]; then
        echo -e "${RED}‚ùå Impossible de lire la cl√© publique SOCIETY${NC}"
        return 1
    fi
    
    echo -e "${CYAN}üîë Wallet SOCIETY: ${society_pubkey:0:8}...${NC}"
    echo ""
    
    # Afficher le solde du wallet SOCIETY
    echo -e "${YELLOW}üìä R√©cup√©ration du solde SOCIETY...${NC}"
    local balance_json=$(silkaj --json money balance "$society_pubkey" 2>/dev/null)
    
    if [[ $? -ne 0 ]]; then
        echo -e "${RED}‚ùå Impossible de r√©cup√©rer le solde du wallet SOCIETY${NC}"
        return 1
    fi
    
    # Extraire les montants (en centimes, convertir en ƒû1)
    local blockchain_centimes=$(echo "$balance_json" | jq -r '.balances.blockchain // 0' 2>/dev/null)
    local pending_centimes=$(echo "$balance_json" | jq -r '.balances.pending // 0' 2>/dev/null)
    local total_centimes=$(echo "$balance_json" | jq -r '.balances.total // 0' 2>/dev/null)
    
    # Valider les valeurs
    [[ -z "$blockchain_centimes" || "$blockchain_centimes" == "null" ]] && blockchain_centimes="0"
    [[ -z "$pending_centimes" || "$pending_centimes" == "null" ]] && pending_centimes="0"
    [[ -z "$total_centimes" || "$total_centimes" == "null" ]] && total_centimes="0"
    
    local blockchain_g1=$(echo "scale=2; $blockchain_centimes / 100" | bc -l)
    local pending_g1=$(echo "scale=2; $pending_centimes / 100" | bc -l)
    local total_g1=$(echo "scale=2; $total_centimes / 100" | bc -l)
    
    # Convertir en ·∫êen (1 ƒû1 = 10 ·∫êen)
    local blockchain_zen=$(echo "scale=2; $blockchain_g1 * 10" | bc -l)
    local pending_zen=$(echo "scale=2; $pending_g1 * 10" | bc -l)
    local total_zen=$(echo "scale=2; $total_g1 * 10" | bc -l)
    
    echo -e "${GREEN}‚úÖ Solde du wallet SOCIETY:${NC}"
    echo -e "  ‚Ä¢ Blockchain: ${blockchain_g1} ƒû1 (${blockchain_zen} ·∫êen)"
    echo -e "  ‚Ä¢ Pending: ${pending_g1} ƒû1 (${pending_zen} ·∫êen)"
    echo -e "  ‚Ä¢ Total: ${total_g1} ƒû1 (${total_zen} ·∫êen)"
    echo ""
    
    # V√©rifier qu'il y a des fonds disponibles
    if [[ $(echo "$blockchain_g1 <= 0" | bc -l) -eq 1 ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Aucun fonds disponible dans le wallet SOCIETY${NC}"
        return 0
    fi
    
    # Demander l'email du soci√©taire
    read -p "Email du soci√©taire: " email_ref
    if [[ -z "$email_ref" ]]; then
        echo -e "${RED}‚ùå Email requis${NC}"
        return 1
    fi
    
    # R√©cup√©rer la ZEN Card du soci√©taire
    local zencard_pubkey=""
    local zencard_dunikey="$HOME/.zen/game/players/${email_ref}/secret.dunikey"
    local zencard_g1pub="$HOME/.zen/game/players/${email_ref}/.g1pub"
    
    if [[ -f "$zencard_dunikey" ]]; then
        zencard_pubkey=$(cat "$zencard_dunikey" | grep "pub:" | cut -d ' ' -f 2)
        echo -e "${GREEN}‚úÖ ZEN Card trouv√©e: ${zencard_pubkey:0:8}...${NC}"
    elif [[ -f "$zencard_g1pub" ]]; then
        zencard_pubkey=$(cat "$zencard_g1pub")
        echo -e "${GREEN}‚úÖ ZEN Card trouv√©e (g1pub): ${zencard_pubkey:0:8}...${NC}"
    else
        echo -e "${RED}‚ùå ZEN Card non trouv√©e pour ${email_ref}${NC}"
        echo -e "${CYAN}üí° V√©rifiez que le dossier ~/.zen/game/players/${email_ref}/ existe${NC}"
        return 1
    fi
    
    # V√©rifier les portefeuilles 3x1/3
    local treasury_pubkey=""
    local rnd_pubkey=""
    local assets_pubkey=""
    
    if [[ -f "$HOME/.zen/game/uplanet.CASH.dunikey" ]]; then
        treasury_pubkey=$(cat "$HOME/.zen/game/uplanet.CASH.dunikey" | grep "pub:" | cut -d ' ' -f 2)
        echo -e "${GREEN}‚úÖ Treasury trouv√©: ${treasury_pubkey:0:8}...${NC}"
    else
        echo -e "${RED}‚ùå Wallet TREASURY non trouv√©: ~/.zen/game/uplanet.CASH.dunikey${NC}"
        return 1
    fi
    
    if [[ -f "$HOME/.zen/game/uplanet.RnD.dunikey" ]]; then
        rnd_pubkey=$(cat "$HOME/.zen/game/uplanet.RnD.dunikey" | grep "pub:" | cut -d ' ' -f 2)
        echo -e "${GREEN}‚úÖ R&D trouv√©: ${rnd_pubkey:0:8}...${NC}"
    else
        echo -e "${RED}‚ùå Wallet R&D non trouv√©: ~/.zen/game/uplanet.RnD.dunikey${NC}"
        return 1
    fi
    
    if [[ -f "$HOME/.zen/game/uplanet.ASSETS.dunikey" ]]; then
        assets_pubkey=$(cat "$HOME/.zen/game/uplanet.ASSETS.dunikey" | grep "pub:" | cut -d ' ' -f 2)
        echo -e "${GREEN}‚úÖ Assets trouv√©: ${assets_pubkey:0:8}...${NC}"
    else
        echo -e "${RED}‚ùå Wallet ASSETS non trouv√©: ~/.zen/game/uplanet.ASSETS.dunikey${NC}"
        return 1
    fi
    
    echo ""
    
    # Demander le montant √† transf√©rer
    echo -e "${YELLOW}üí∞ Montant disponible dans SOCIETY: ${blockchain_g1} ƒû1 (${blockchain_zen} ·∫êen)${NC}"
    read -p "Montant √† transf√©rer en ·∫êen (ou 'max' pour tout transf√©rer): " amount_input
    
    local zen_amount=""
    if [[ "$amount_input" == "max" ]]; then
        zen_amount="$blockchain_zen"
        echo -e "${CYAN}üí∏ Transfert de tout le solde disponible: ${zen_amount} ·∫êen${NC}"
    else
        # Valider que c'est un nombre
        if [[ ! "$amount_input" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
            echo -e "${RED}‚ùå Montant invalide (nombre ou 'max' requis)${NC}"
            return 1
        fi
        zen_amount="$amount_input"
        
        # V√©rifier que le montant ne d√©passe pas le solde
        if [[ $(echo "$zen_amount > $blockchain_zen" | bc -l) -eq 1 ]]; then
            echo -e "${RED}‚ùå Montant demand√© (${zen_amount} ·∫êen) sup√©rieur au solde (${blockchain_zen} ·∫êen)${NC}"
            return 1
        fi
    fi
    
    local g1_amount=$(zen_to_g1 "$zen_amount")
    
    # Demander le type pour la r√©f√©rence
    read -p "Type de soci√©taire (satellite/constellation): " type_ref
    type_ref="${type_ref:-satellite}"
    
    # Calculer les montants 3x1/3
    local part_treasury_zen=$(echo "scale=2; $zen_amount / 3" | bc)
    local part_rnd_zen=$(echo "scale=2; $zen_amount / 3" | bc)
    local part_assets_zen=$(echo "scale=2; $zen_amount - $part_treasury_zen - $part_rnd_zen" | bc)
    
    echo ""
    echo -e "${YELLOW}üìã R√©capitulatif de l'op√©ration:${NC}"
    echo -e "  ‚Ä¢ √âtape 1: SOCIETY ‚Üí ZEN Card ${email_ref}: ${zen_amount} ·∫êen (${g1_amount} ƒû1)"
    echo -e "  ‚Ä¢ √âtape 2: ZEN Card ‚Üí 3x1/3:"
    echo -e "    - Treasury: ${part_treasury_zen} ·∫êen"
    echo -e "    - R&D: ${part_rnd_zen} ·∫êen"
    echo -e "    - Assets: ${part_assets_zen} ·∫êen"
    echo ""
    read -p "Confirmer le transfert? (oui/non): " confirm
    
    if [[ "$confirm" != "oui" ]]; then
        echo -e "${YELLOW}üö´ Transfert annul√©${NC}"
        return 0
    fi
    
    # √âTAPE 1: SOCIETY ‚Üí ZEN Card
    echo ""
    echo -e "${BLUE}üì§ √âtape 1: Transfert SOCIETY ‚Üí ZEN Card ${email_ref}${NC}"
    local reference_society="UPLANET:${UPLANETG1PUB:0:8}:SOCIETY:${email_ref}:${type_ref}:${IPFSNODEID}"
    
    if ! transfer_and_verify "$HOME/.zen/game/uplanet.SOCIETY.dunikey" "$zencard_pubkey" "$zen_amount" "$reference_society" "$email_ref" "RECOVERY_SOCIETY" "Recovery: SOCIETY‚ÜíZENCARD"; then
        echo -e "${RED}‚ùå √âchec de l'√©tape 1 (SOCIETY ‚Üí ZEN Card)${NC}"
        return 1
    fi
    
    # √âTAPE 2: ZEN Card ‚Üí 3x1/3
    echo -e "${BLUE}üì§ √âtape 2: R√©partition 3x1/3 depuis ZEN Card${NC}"
    
    # Transfert vers Treasury (1/3)
    echo -e "${CYAN}  üì§ Treasury (1/3): ${part_treasury_zen} ·∫êen${NC}"
    if ! transfer_and_verify "$zencard_dunikey" "$treasury_pubkey" "$part_treasury_zen" "UPLANET:${UPLANETG1PUB:0:8}:TREASURY:${email_ref}:${type_ref}:${IPFSNODEID}" "$email_ref" "RECOVERY_TREASURY" "Recovery: ZENCARD‚ÜíTREASURY"; then
        echo -e "${RED}‚ùå √âchec transfert Treasury${NC}"
        return 1
    fi
    
    # Mettre √† jour DID pour contribution Treasury
    "${MY_PATH}/tools/did_manager_nostr.sh" update "$email_ref" "TREASURY_CONTRIBUTION" "$part_treasury_zen" "$(zen_to_g1 "$part_treasury_zen")"
    
    # Transfert vers R&D (1/3)
    echo -e "${CYAN}  üì§ R&D (1/3): ${part_rnd_zen} ·∫êen${NC}"
    if ! transfer_and_verify "$zencard_dunikey" "$rnd_pubkey" "$part_rnd_zen" "UPLANET:${UPLANETG1PUB:0:8}:RnD:${email_ref}:${type_ref}:${IPFSNODEID}" "$email_ref" "RECOVERY_RND" "Recovery: ZENCARD‚ÜíRND"; then
        echo -e "${RED}‚ùå √âchec transfert R&D${NC}"
        return 1
    fi
    
    # Mettre √† jour DID pour contribution R&D
    "${MY_PATH}/tools/did_manager_nostr.sh" update "$email_ref" "RND_CONTRIBUTION" "$part_rnd_zen" "$(zen_to_g1 "$part_rnd_zen")"
    
    # Transfert vers Assets (1/3)
    echo -e "${CYAN}  üì§ Assets (1/3): ${part_assets_zen} ·∫êen${NC}"
    if ! transfer_and_verify "$zencard_dunikey" "$assets_pubkey" "$part_assets_zen" "UPLANET:${UPLANETG1PUB:0:8}:ASSETS:${email_ref}:${type_ref}:${IPFSNODEID}" "$email_ref" "RECOVERY_ASSETS" "Recovery: ZENCARD‚ÜíASSETS"; then
        echo -e "${RED}‚ùå √âchec transfert Assets${NC}"
        return 1
    fi
    
    # Mettre √† jour DID pour contribution Assets
    "${MY_PATH}/tools/did_manager_nostr.sh" update "$email_ref" "ASSETS_CONTRIBUTION" "$part_assets_zen" "$(zen_to_g1 "$part_assets_zen")"
    
    echo ""
    echo -e "${GREEN}üéâ Transfert de r√©cup√©ration termin√© avec succ√®s!${NC}"
    echo -e "${CYAN}üìä R√©sum√©:${NC}"
    echo -e "  ‚Ä¢ ${zen_amount} ·∫êen (${g1_amount} ƒû1) transf√©r√©s de SOCIETY vers ZEN Card ${email_ref}"
    echo -e "  ‚Ä¢ R√©partition 3x1/3 effectu√©e:"
    echo -e "    - Treasury: ${part_treasury_zen} ·∫êen"
    echo -e "    - R&D: ${part_rnd_zen} ·∫êen"
    echo -e "    - Assets: ${part_assets_zen} ·∫êen"
    echo -e "  ‚Ä¢ Toutes les transactions confirm√©es sur la blockchain"
    echo ""
    
    # Afficher le nouveau solde SOCIETY
    echo -e "${YELLOW}üìä Nouveau solde du wallet SOCIETY...${NC}"
    sleep 2
    local new_balance_json=$(silkaj --json money balance "$society_pubkey" 2>/dev/null)
    if [[ $? -eq 0 ]]; then
        local new_blockchain_centimes=$(echo "$new_balance_json" | jq -r '.balances.blockchain // 0' 2>/dev/null)
        [[ -z "$new_blockchain_centimes" || "$new_blockchain_centimes" == "null" ]] && new_blockchain_centimes="0"
        local new_blockchain_g1=$(echo "scale=2; $new_blockchain_centimes / 100" | bc -l)
        local new_blockchain_zen=$(echo "scale=2; $new_blockchain_g1 * 10" | bc -l)
        echo -e "${GREEN}‚úÖ Nouveau solde SOCIETY: ${new_blockchain_g1} ƒû1 (${new_blockchain_zen} ·∫êen)${NC}"
    fi
    
    # Mettre √† jour le document DID avec le statut de soci√©taire
    local contract_type="SOCIETAIRE_${type_ref^^}"
    "${MY_PATH}/tools/did_manager_nostr.sh" update "$email_ref" "$contract_type" "$zen_amount" "$g1_amount"
    
    return 0
}

################################################################################
# Fonction de d√©pannage pour refaire un transfert ZEN Card ‚Üí 3x1/3
# Cas d'usage: la deuxi√®me √©tape a √©chou√© partiellement
################################################################################
process_recovery_3x13() {
    echo -e "${YELLOW}üîß MODE D√âPANNAGE - Transfert ZEN Card ‚Üí 3x1/3${NC}"
    echo -e "${CYAN}üìã Permet de refaire un transfert depuis la ZEN Card d'un player vers TREASURY/RnD/ASSETS${NC}"
    echo ""
    
    # Demander l'email du player
    read -p "Email du soci√©taire: " email_ref
    if [[ -z "$email_ref" ]]; then
        echo -e "${RED}‚ùå Email requis${NC}"
        return 1
    fi
    
    # R√©cup√©rer la ZEN Card du player
    local zencard_pubkey=""
    local zencard_dunikey="$HOME/.zen/game/players/${email_ref}/secret.dunikey"
    local zencard_g1pub="$HOME/.zen/game/players/${email_ref}/.g1pub"
    
    if [[ -f "$zencard_dunikey" ]]; then
        zencard_pubkey=$(cat "$zencard_dunikey" | grep "pub:" | cut -d ' ' -f 2)
        echo -e "${GREEN}‚úÖ ZEN Card trouv√©e: ${zencard_pubkey:0:8}...${NC}"
    elif [[ -f "$zencard_g1pub" ]]; then
        zencard_pubkey=$(cat "$zencard_g1pub")
        echo -e "${YELLOW}‚ö†Ô∏è  ZEN Card trouv√©e (g1pub uniquement): ${zencard_pubkey:0:8}...${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  Le fichier secret.dunikey est n√©cessaire pour effectuer le transfert${NC}"
        return 1
    else
        echo -e "${RED}‚ùå ZEN Card non trouv√©e pour ${email_ref}${NC}"
        echo -e "${CYAN}üí° V√©rifiez que le dossier ~/.zen/game/players/${email_ref}/ existe${NC}"
        return 1
    fi
    
    # Afficher le solde de la ZEN Card
    echo ""
    echo -e "${YELLOW}üìä R√©cup√©ration du solde de la ZEN Card...${NC}"
    local balance_json=$(silkaj --json money balance "$zencard_pubkey" 2>/dev/null)
    
    if [[ $? -ne 0 ]]; then
        echo -e "${RED}‚ùå Impossible de r√©cup√©rer le solde de la ZEN Card${NC}"
        return 1
    fi
    
    # Extraire les montants (en centimes, convertir en ƒû1)
    local blockchain_centimes=$(echo "$balance_json" | jq -r '.balances.blockchain // 0' 2>/dev/null)
    local pending_centimes=$(echo "$balance_json" | jq -r '.balances.pending // 0' 2>/dev/null)
    local total_centimes=$(echo "$balance_json" | jq -r '.balances.total // 0' 2>/dev/null)
    
    # Valider les valeurs
    [[ -z "$blockchain_centimes" || "$blockchain_centimes" == "null" ]] && blockchain_centimes="0"
    [[ -z "$pending_centimes" || "$pending_centimes" == "null" ]] && pending_centimes="0"
    [[ -z "$total_centimes" || "$total_centimes" == "null" ]] && total_centimes="0"
    
    local blockchain_g1=$(echo "scale=2; $blockchain_centimes / 100" | bc -l)
    local pending_g1=$(echo "scale=2; $pending_centimes / 100" | bc -l)
    local total_g1=$(echo "scale=2; $total_centimes / 100" | bc -l)
    
    # Convertir en ·∫êen (1 ƒû1 = 10 ·∫êen)
    local blockchain_zen=$(echo "scale=2; $blockchain_g1 * 10" | bc -l)
    local pending_zen=$(echo "scale=2; $pending_g1 * 10" | bc -l)
    local total_zen=$(echo "scale=2; $total_g1 * 10" | bc -l)
    
    echo -e "${GREEN}‚úÖ Solde de la ZEN Card ${email_ref}:${NC}"
    echo -e "  ‚Ä¢ Blockchain: ${blockchain_g1} ƒû1 (${blockchain_zen} ·∫êen)"
    echo -e "  ‚Ä¢ Pending: ${pending_g1} ƒû1 (${pending_zen} ·∫êen)"
    echo -e "  ‚Ä¢ Total: ${total_g1} ƒû1 (${total_zen} ·∫êen)"
    echo ""
    
    # V√©rifier qu'il y a des fonds disponibles
    if [[ $(echo "$blockchain_g1 <= 1.0" | bc -l) -eq 1 ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Solde insuffisant dans la ZEN Card (‚â§ 1ƒû1)${NC}"
        echo -e "${CYAN}üí° Il faut au moins > 1ƒû1 pour effectuer un transfert${NC}"
        return 0
    fi
    
    # Menu de s√©lection du wallet 3x1/3 destination
    echo -e "${BLUE}üìã S√©lectionnez le portefeuille de destination:${NC}"
    echo "1. TREASURY (CASH)"
    echo "2. R&D"
    echo "3. ASSETS"
    echo "4. Annuler"
    echo ""
    read -p "Votre choix (1-4): " wallet_choice
    
    local dest_wallet=""
    local dest_name=""
    local dest_type=""
    local did_contribution_type=""
    
    case $wallet_choice in
        1)
            if [[ -f "$HOME/.zen/game/uplanet.CASH.dunikey" ]]; then
                dest_wallet=$(cat "$HOME/.zen/game/uplanet.CASH.dunikey" | grep "pub:" | cut -d ' ' -f 2)
                dest_name="TREASURY"
                dest_type="TREASURY"
                did_contribution_type="TREASURY_CONTRIBUTION"
                echo -e "${GREEN}‚úÖ Treasury: ${dest_wallet:0:8}...${NC}"
            else
                echo -e "${RED}‚ùå Wallet TREASURY non trouv√©: ~/.zen/game/uplanet.CASH.dunikey${NC}"
                return 1
            fi
            ;;
        2)
            if [[ -f "$HOME/.zen/game/uplanet.RnD.dunikey" ]]; then
                dest_wallet=$(cat "$HOME/.zen/game/uplanet.RnD.dunikey" | grep "pub:" | cut -d ' ' -f 2)
                dest_name="R&D"
                dest_type="RnD"
                did_contribution_type="RND_CONTRIBUTION"
                echo -e "${GREEN}‚úÖ R&D: ${dest_wallet:0:8}...${NC}"
            else
                echo -e "${RED}‚ùå Wallet R&D non trouv√©: ~/.zen/game/uplanet.RnD.dunikey${NC}"
                return 1
            fi
            ;;
        3)
            if [[ -f "$HOME/.zen/game/uplanet.ASSETS.dunikey" ]]; then
                dest_wallet=$(cat "$HOME/.zen/game/uplanet.ASSETS.dunikey" | grep "pub:" | cut -d ' ' -f 2)
                dest_name="ASSETS"
                dest_type="ASSETS"
                did_contribution_type="ASSETS_CONTRIBUTION"
                echo -e "${GREEN}‚úÖ Assets: ${dest_wallet:0:8}...${NC}"
            else
                echo -e "${RED}‚ùå Wallet ASSETS non trouv√©: ~/.zen/game/uplanet.ASSETS.dunikey${NC}"
                return 1
            fi
            ;;
        4)
            echo -e "${YELLOW}üö´ Op√©ration annul√©e${NC}"
            return 0
            ;;
        *)
            echo -e "${RED}‚ùå Choix invalide${NC}"
            return 1
            ;;
    esac
    
    echo ""
    
    # Demander le montant √† transf√©rer
    echo -e "${YELLOW}üí∞ Montant disponible dans la ZEN Card: ${blockchain_g1} ƒû1 (${blockchain_zen} ·∫êen)${NC}"
    read -p "Montant √† transf√©rer en ·∫êen: " amount_input
    
    # Valider que c'est un nombre
    if [[ ! "$amount_input" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
        echo -e "${RED}‚ùå Montant invalide (nombre requis)${NC}"
        return 1
    fi
    
    local zen_amount="$amount_input"
    
    # V√©rifier que le montant ne d√©passe pas le solde disponible
    if [[ $(echo "$zen_amount > $blockchain_zen" | bc -l) -eq 1 ]]; then
        echo -e "${RED}‚ùå Montant demand√© (${zen_amount} ·∫êen) sup√©rieur au solde (${blockchain_zen} ·∫êen)${NC}"
        return 1
    fi
    
    local g1_amount=$(zen_to_g1 "$zen_amount")
    
    # Demander le type pour la r√©f√©rence
    read -p "Type de soci√©taire (satellite/constellation): " type_ref
    type_ref="${type_ref:-satellite}"
    
    echo ""
    echo -e "${YELLOW}üìã R√©capitulatif de l'op√©ration:${NC}"
    echo -e "  ‚Ä¢ Source: ZEN Card ${email_ref} (${zencard_pubkey:0:8}...)"
    echo -e "  ‚Ä¢ Destination: ${dest_name} (${dest_wallet:0:8}...)"
    echo -e "  ‚Ä¢ Montant: ${zen_amount} ·∫êen (${g1_amount} ƒû1)"
    echo ""
    read -p "Confirmer le transfert? (oui/non): " confirm
    
    if [[ "$confirm" != "oui" ]]; then
        echo -e "${YELLOW}üö´ Transfert annul√©${NC}"
        return 0
    fi
    
    # Effectuer le transfert
    echo ""
    echo -e "${BLUE}üöÄ Lancement du transfert ZEN Card ‚Üí ${dest_name}...${NC}"
    
    local reference="UPLANET:${UPLANETG1PUB:0:8}:${dest_type}:${email_ref}:${type_ref}:${IPFSNODEID}"
    
    if transfer_and_verify "$zencard_dunikey" "$dest_wallet" "$zen_amount" "$reference" "$email_ref" "RECOVERY_3x13_${dest_type}" "Recovery 3x1/3: ZENCARD‚Üí${dest_name}"; then
        echo ""
        echo -e "${GREEN}üéâ Transfert de r√©cup√©ration 3x1/3 termin√© avec succ√®s!${NC}"
        echo -e "${CYAN}üìä R√©sum√©:${NC}"
        echo -e "  ‚Ä¢ ${zen_amount} ·∫êen (${g1_amount} ƒû1) transf√©r√©s de ZEN Card vers ${dest_name}"
        echo -e "  ‚Ä¢ Transaction confirm√©e sur la blockchain"
        echo ""
        
        # Mettre √† jour DID pour contribution
        "${MY_PATH}/tools/did_manager_nostr.sh" update "$email_ref" "$did_contribution_type" "$zen_amount" "$g1_amount"
        
        # Afficher le nouveau solde de la ZEN Card
        echo -e "${YELLOW}üìä Nouveau solde de la ZEN Card...${NC}"
        sleep 2
        local new_balance_json=$(silkaj --json money balance "$zencard_pubkey" 2>/dev/null)
        if [[ $? -eq 0 ]]; then
            local new_blockchain_centimes=$(echo "$new_balance_json" | jq -r '.balances.blockchain // 0' 2>/dev/null)
            [[ -z "$new_blockchain_centimes" || "$new_blockchain_centimes" == "null" ]] && new_blockchain_centimes="0"
            local new_blockchain_g1=$(echo "scale=2; $new_blockchain_centimes / 100" | bc -l)
            local new_blockchain_zen=$(echo "scale=2; $new_blockchain_g1 * 10" | bc -l)
            echo -e "${GREEN}‚úÖ Nouveau solde ZEN Card: ${new_blockchain_g1} ƒû1 (${new_blockchain_zen} ·∫êen)${NC}"
        fi
        
        return 0
    else
        echo -e "${RED}‚ùå √âchec du transfert de r√©cup√©ration 3x1/3${NC}"
        return 1
    fi
}

################################################################################
# Menu interactif
################################################################################
show_menu() {
    echo -e "${BLUE}üèõÔ∏è  UPLANET.official.sh - Menu de gestion des virements${NC}"
    echo ""
    echo "1. Virement LOCATAIRE (recharge MULTIPASS)"
    echo "2. Virement SOCI√âTAIRE Satellite (50‚Ç¨/an)"
    echo "3. Virement SOCI√âTAIRE Constellation (540‚Ç¨/3ans)"
    echo "4. Apport CAPITAL INFRASTRUCTURE (CAPTAIN ‚Üí NODE)"
    echo "5. üîß MODE D√âPANNAGE (r√©cup√©ration compl√®te SOCIETY ‚Üí 3x1/3)"
    echo "6. üîß MODE D√âPANNAGE (r√©cup√©ration partielle ZEN Card ‚Üí 3x1/3)"
    echo "7. Quitter"
    echo ""
    read -p "Choisissez une option (1-7): " choice
    
    case $choice in
        1)
            read -p "Email du locataire: " email
            if [[ -n "$email" ]]; then
                read -p "Montant en ·∫êen (d√©faut: ${NCARD:-50}): " montant
                montant="${montant:-${NCARD:-50}}"
                
                # Valider que le montant est un nombre
                if [[ "$montant" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
                    process_locataire "$email" "$montant"
                else
                    echo -e "${RED}‚ùå Montant invalide (nombre requis)${NC}"
                fi
            else
                echo -e "${RED}‚ùå Email requis${NC}"
            fi
            ;;
        2)
            read -p "Email du soci√©taire: " email
            if [[ -n "$email" ]]; then
                read -p "Montant en ·∫êen (d√©faut: ${ZENCARD_SATELLITE:-50}): " montant
                montant="${montant:-${ZENCARD_SATELLITE:-50}}"
                
                # Valider que le montant est un nombre
                if [[ "$montant" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
                    process_societaire "$email" "satellite" "$montant"
                else
                    echo -e "${RED}‚ùå Montant invalide (nombre requis)${NC}"
                fi
            else
                echo -e "${RED}‚ùå Email requis${NC}"
            fi
            ;;
        3)
            read -p "Email du soci√©taire: " email
            if [[ -n "$email" ]]; then
                read -p "Montant en ·∫êen (d√©faut: ${ZENCARD_CONSTELLATION:-540}): " montant
                montant="${montant:-${ZENCARD_CONSTELLATION:-540}}"
                
                # Valider que le montant est un nombre
                if [[ "$montant" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
                    process_societaire "$email" "constellation" "$montant"
                else
                    echo -e "${RED}‚ùå Montant invalide (nombre requis)${NC}"
                fi
            else
                echo -e "${RED}‚ùå Email requis${NC}"
            fi
            ;;
        4)
            if [[ -n "$CAPTAINEMAIL" ]]; then
                # V√©rifier si MACHINE_VALUE_ZEN est d√©finie, sinon la demander
                local machine_value="${MACHINE_VALUE_ZEN}"
                if [[ -z "$machine_value" ]]; then
                    read -p "Valeur de la machine en ·∫êen (d√©faut: 500): " machine_value
                    machine_value="${machine_value:-500}"
                fi
                echo -e "${CYAN}üí∞ Apport capital pour: ${CAPTAINEMAIL} (${machine_value} ·∫êen)${NC}"
                process_infrastructure "$CAPTAINEMAIL" "$machine_value"
            else
                echo -e "${RED}‚ùå CAPTAINEMAIL non d√©fini dans l'environnement${NC}"
                echo -e "${CYAN}üí° Configurez votre email de capitaine dans my.sh${NC}"
            fi
            ;;
        5)
            process_recovery
            ;;
        6)
            process_recovery_3x13
            ;;
        7)
            echo -e "${GREEN}üëã Au revoir!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Option invalide${NC}"
            ;;
    esac
}

################################################################################
# Point d'entr√©e principal
################################################################################
main() {
    # V√©rifier que silkaj est disponible
    if ! command -v silkaj &> /dev/null; then
        echo -e "${RED}‚ùå Erreur: silkaj n'est pas install√© ou n'est pas dans le PATH${NC}"
        exit 1
    fi
    
    # V√©rifier que jq est disponible
    if ! command -v jq &> /dev/null; then
        echo -e "${RED}‚ùå Erreur: jq n'est pas install√© ou n'est pas dans le PATH${NC}"
        exit 1
    fi
    
    # V√©rifier que bc est disponible
    if ! command -v bc &> /dev/null; then
        echo -e "${RED}‚ùå Erreur: bc n'est pas install√© ou n'est pas dans le PATH${NC}"
        exit 1
    fi
    
    # Traitement des arguments en ligne de commande
    if [[ $# -gt 0 ]]; then
        # Parse arguments
        local email=""
        local type="satellite"
        local montant=""
        local mode=""
        
        while [[ $# -gt 0 ]]; do
            case "$1" in
                -l|--locataire)
                    mode="locataire"
                    shift
                    if [[ -n "$1" && ! "$1" =~ ^- ]]; then
                        email="$1"
                        shift
                    fi
                    ;;
                -s|--societaire)
                    mode="societaire"
                    shift
                    if [[ -n "$1" && ! "$1" =~ ^- ]]; then
                        email="$1"
                        shift
                    fi
                    ;;
                -i|--infrastructure)
                    mode="infrastructure"
                    shift
                    ;;
                -r|--recovery)
                    mode="recovery"
                    shift
                    ;;
                --recovery-3x13)
                    mode="recovery_3x13"
                    shift
                    ;;
                -t|--type)
                    shift
                    if [[ -n "$1" && ! "$1" =~ ^- ]]; then
                        type="$1"
                        shift
                    fi
                    ;;
                -m|--montant)
                    shift
                    if [[ -n "$1" && ! "$1" =~ ^- ]]; then
                        montant="$1"
                        shift
                    fi
                    ;;
                -h|--help)
                    show_help
                    exit 0
                    ;;
                *)
                    echo -e "${RED}‚ùå Option inconnue: $1${NC}"
                    show_help
                    exit 1
                    ;;
            esac
        done
        
        # Execute based on mode
        case "$mode" in
            "locataire")
                if [[ -n "$email" ]]; then
                    process_locataire "$email" "$montant"
                else
                    echo -e "${RED}‚ùå Email requis pour l'option --locataire${NC}"
                    exit 1
                fi
                ;;
            "societaire")
                if [[ -n "$email" ]]; then
                    process_societaire "$email" "$type" "$montant"
                else
                    echo -e "${RED}‚ùå Email requis pour l'option --societaire${NC}"
                    exit 1
                fi
                ;;
            "infrastructure")
                if [[ -n "$CAPTAINEMAIL" ]]; then
                    local machine_value="${montant:-${MACHINE_VALUE_ZEN:-500}}"
                    echo -e "${CYAN}üí∞ Apport capital infrastructure: ${CAPTAINEMAIL} (${machine_value} ·∫êen)${NC}"
                    process_infrastructure "$CAPTAINEMAIL" "$machine_value"
                else
                    echo -e "${RED}‚ùå CAPTAINEMAIL non d√©fini dans l'environnement${NC}"
                    echo -e "${CYAN}üí° Configurez votre email de capitaine dans my.sh${NC}"
                    exit 1
                fi
                ;;
            "recovery")
                process_recovery
                ;;
            "recovery_3x13")
                process_recovery_3x13
                ;;
            *)
                echo -e "${RED}‚ùå Mode non sp√©cifi√©${NC}"
                show_help
                exit 1
                ;;
        esac
    else
        # Mode interactif
        show_menu
    fi
}

# Ex√©cuter le script principal
main "$@"
