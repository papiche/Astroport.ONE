#!/bin/bash
################################################################################
# uplanet_onboarding.sh - Assistant d'embarquement UPlanet ·∫êEN
# Version: 1.0
# License: AGPL-3.0 (https://choosealicense.com/licenses/agpl-3.0/)
################################################################################
# Guide le nouveau capitaine pour rejoindre la coop√©rative UPlanet ·∫êEN
# - Configuration .env personnalis√©e
# - Valorisation machine et PAF
# - R√©cup√©ration swarm.key
# - Initialisation UPLANET
# - Adh√©sion coop√©rative
################################################################################

MY_PATH="`dirname \"$0\"`"
MY_PATH="`( cd \"$MY_PATH\" && pwd )`"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Configuration
ENV_FILE="$HOME/.zen/Astroport.ONE/.env"
ENV_TEMPLATE="$MY_PATH/.env.template"

################################################################################
# Fonctions utilitaires
################################################################################

print_header() {
    clear
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë${NC}                    ${YELLOW}üè¥‚Äç‚ò†Ô∏è EMBARQUEMENT UPLANET ·∫êEN${NC}                        ${BLUE}‚ïë${NC}"
    echo -e "${BLUE}‚ïë${NC}                ${CYAN}Bienvenue dans la Coop√©rative des Autoh√©bergeurs${NC}              ${BLUE}‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

print_section() {
    echo -e "\n${CYAN}üîπ $1${NC}"
    echo -e "${YELLOW}$(printf '%.0s=' {1..60})${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}üí° $1${NC}"
}

# Fonction pour red√©marrer IPFS
restart_ipfs_service() {
    print_info "Red√©marrage d'IPFS pour appliquer la nouvelle configuration..."
    sudo systemctl restart ipfs
    sleep 3
    print_success "IPFS red√©marr√© avec la nouvelle cl√© swarm"
}

# Fonction pour d√©tecter les ressources syst√®me via heartbox_analysis.sh
detect_system_resources() {
    local heartbox_script="$MY_PATH/tools/heartbox_analysis.sh"
    
    if [[ -f "$heartbox_script" ]]; then
        # Utiliser heartbox_analysis.sh pour obtenir les donn√©es syst√®me
        local analysis_json=$("$heartbox_script" export --json 2>/dev/null)
        
        if [[ -n "$analysis_json" ]]; then
            local cpu_cores=$(echo "$analysis_json" | jq -r '.system.cpu.cores // "4"' 2>/dev/null || echo "4")
            local ram_gb=$(echo "$analysis_json" | jq -r '.system.memory.total_gb // "8"' 2>/dev/null || echo "8")
            local disk_available=$(echo "$analysis_json" | jq -r '.system.storage.available // "100G"' 2>/dev/null || echo "100G")
            local disk_gb=$(echo "$disk_available" | sed 's/G//' | sed 's/T/*1024/' | bc 2>/dev/null || echo "100")
            
            echo "$cpu_cores|$ram_gb|$disk_gb"
            return 0
        fi
    fi
    
    # Fallback si heartbox_analysis.sh n'est pas disponible
    local cpu_cores=$(nproc 2>/dev/null || echo "4")
    local ram_gb=$(free -g | awk '/^Mem:/{print $2}' 2>/dev/null || echo "8")
    local disk_gb=$(df -BG / | awk 'NR==2{print $2}' | sed 's/G//' 2>/dev/null || echo "100")
    
    echo "$cpu_cores|$ram_gb|$disk_gb"
}

# Fonction pour obtenir les capacit√©s via heartbox_analysis.sh
get_system_capacities() {
    local heartbox_script="$MY_PATH/tools/heartbox_analysis.sh"
    
    if [[ -f "$heartbox_script" ]]; then
        local analysis_json=$("$heartbox_script" export --json 2>/dev/null)
        
        if [[ -n "$analysis_json" ]]; then
            local zencard_slots=$(echo "$analysis_json" | jq -r '.capacities.zencard_slots // "0"' 2>/dev/null || echo "0")
            local nostr_slots=$(echo "$analysis_json" | jq -r '.capacities.nostr_slots // "0"' 2>/dev/null || echo "0")
            local available_space=$(echo "$analysis_json" | jq -r '.capacities.available_space_gb // "0"' 2>/dev/null || echo "0")
            
            echo "$zencard_slots|$nostr_slots|$available_space"
            return 0
        fi
    fi
    
    # Fallback simple
    echo "0|0|0"
}

# Fonction pour sugg√©rer le type de machine
suggest_machine_type() {
    local resources=$(detect_system_resources)
    local cpu_cores=$(echo "$resources" | cut -d'|' -f1)
    local ram_gb=$(echo "$resources" | cut -d'|' -f2)
    local disk_gb=$(echo "$resources" | cut -d'|' -f3)
    
    # Obtenir les capacit√©s calcul√©es
    local capacities=$(get_system_capacities)
    local zencard_slots=$(echo "$capacities" | cut -d'|' -f1)
    local nostr_slots=$(echo "$capacities" | cut -d'|' -f2)
    local available_space=$(echo "$capacities" | cut -d'|' -f3)
    
    echo -e "${BLUE}üñ•Ô∏è  Ressources d√©tect√©es:${NC}"
    echo -e "   ‚Ä¢ CPU: ${CYAN}$cpu_cores c≈ìurs${NC}"
    echo -e "   ‚Ä¢ RAM: ${CYAN}$ram_gb Go${NC}"
    echo -e "   ‚Ä¢ Disque disponible: ${CYAN}$disk_gb Go${NC}"
    echo ""
    
    echo -e "${BLUE}üìä Capacit√©s d'h√©bergement calcul√©es:${NC}"
    echo -e "   ‚Ä¢ ZEN Cards (128Go): ${YELLOW}$zencard_slots slots${NC}"
    echo -e "   ‚Ä¢ MULTIPASS (10Go): ${YELLOW}$nostr_slots slots${NC}"
    echo -e "   ‚Ä¢ Espace total disponible: ${CYAN}$available_space Go${NC}"
    echo ""
    
    # Suggestion bas√©e sur les ressources ET les capacit√©s
    if [[ $cpu_cores -ge 8 && $ram_gb -ge 16 && $zencard_slots -ge 10 ]]; then
        echo -e "${GREEN}üíª Machine recommand√©e: ${YELLOW}Constellation${NC} (serveur puissant)"
        echo "constellation"
    elif [[ $cpu_cores -ge 4 && $ram_gb -ge 8 && $zencard_slots -ge 2 ]]; then
        echo -e "${GREEN}üíª Machine recommand√©e: ${YELLOW}PC Gamer${NC} (station interm√©diaire)"
        echo "pc_gamer"
    else
        echo -e "${GREEN}üíª Machine recommand√©e: ${YELLOW}Satellite${NC} (station l√©g√®re)"
        echo "satellite"
    fi
}

################################################################################
# √âtapes d'embarquement
################################################################################

# √âtape 1: Introduction et pr√©sentation
step_introduction() {
    print_header
    print_section "PR√âSENTATION UPLANET ·∫êEN"
    
    echo -e "${GREEN}üåü F√©licitations ! Vous venez d'installer Astroport.ONE${NC}"
    echo ""
    echo -e "${BLUE}üè¥‚Äç‚ò†Ô∏è Qu'est-ce qu'un Capitaine UPlanet ?${NC}"
    echo "   Vous √™tes propri√©taire d'une ‚ô•Ô∏èBOX (CoeurBox) qui participe"
    echo "   √† l'√©conomie d√©centralis√©e UPlanet en fournissant des services"
    echo "   d'h√©bergement et en recevant des ·∫êen en √©change."
    echo ""
    echo -e "${BLUE}üí∞ √âconomie ·∫êEN:${NC}"
    echo "   ‚Ä¢ 1 ·∫êen = 0.1 ƒû1 (monnaie libre)"
    echo "   ‚Ä¢ PAF: Participation Aux Frais (co√ªts op√©rationnels)"
    echo "   ‚Ä¢ Parts sociales: Capital coop√©ratif (valorisation machine)"
    echo "   ‚Ä¢ Revenus: Services d'h√©bergement pour locataires/soci√©taires"
    echo ""
    echo -e "${BLUE}ü§ù Coop√©rative:${NC}"
    echo "   ‚Ä¢ Gouvernance d√©mocratique (1 membre = 1 voix)"
    echo "   ‚Ä¢ R√©partition 3x1/3: Tr√©sorerie, R&D, Actifs"
    echo "   ‚Ä¢ Mutualisation des risques et des b√©n√©fices"
    echo ""
    
    read -p "√ätes-vous pr√™t √† rejoindre la coop√©rative UPlanet ·∫êEN ? (o/N): " ready
    if [[ "$ready" != "o" && "$ready" != "O" ]]; then
        echo -e "${YELLOW}Vous pouvez relancer cet assistant plus tard avec:${NC}"
        echo -e "${CYAN}~/.zen/Astroport.ONE/uplanet_onboarding.sh${NC}"
        exit 0
    fi
}

# √âtape 2: Configuration √©conomique
step_economic_configuration() {
    print_section "CONFIGURATION √âCONOMIQUE"
    
    # Copier le template si .env n'existe pas
    if [[ ! -f "$ENV_FILE" ]]; then
        if [[ -f "$ENV_TEMPLATE" ]]; then
            cp "$ENV_TEMPLATE" "$ENV_FILE"
            print_success "Fichier de configuration cr√©√©: $ENV_FILE"
        else
            print_error "Template de configuration manquant: $ENV_TEMPLATE"
            return 1
        fi
    else
        print_info "Configuration existante trouv√©e: $ENV_FILE"
    fi
    
    echo ""
    echo -e "${BLUE}üí∞ Configuration des param√®tres √©conomiques:${NC}"
    echo ""
    
    # PAF (Participation Aux Frais)
    local current_paf=$(grep "^PAF=" "$ENV_FILE" 2>/dev/null | cut -d'=' -f2 || echo "14")
    echo -e "${CYAN}PAF (Participation Aux Frais hebdomadaire):${NC}"
    echo "   La PAF couvre vos co√ªts op√©rationnels (√©lectricit√©, internet, maintenance)"
    echo "   Valeur recommand√©e: 14 ·∫êen/semaine (‚âà 1.4 ƒû1)"
    read -p "PAF hebdomadaire en ·∫êen [$current_paf]: " new_paf
    new_paf="${new_paf:-$current_paf}"
    
    # Tarifs services
    local current_ncard=$(grep "^NCARD=" "$ENV_FILE" 2>/dev/null | cut -d'=' -f2 || echo "1")
    local current_zcard=$(grep "^ZCARD=" "$ENV_FILE" 2>/dev/null | cut -d'=' -f2 || echo "4")
    
    echo ""
    echo -e "${CYAN}Tarifs de vos services d'h√©bergement:${NC}"
    echo "   MULTIPASS: Compte social NOSTR (10Go stockage)"
    read -p "Tarif MULTIPASS hebdomadaire en ·∫êen [$current_ncard]: " new_ncard
    new_ncard="${new_ncard:-$current_ncard}"
    
    echo "   ZEN Card: Identit√© √©conomique (128Go stockage)"
    read -p "Tarif ZEN Card hebdomadaire en ·∫êen [$current_zcard]: " new_zcard
    new_zcard="${new_zcard:-$current_zcard}"
    
    # Mettre √† jour le fichier .env
    sed -i "s/^PAF=.*/PAF=$new_paf/" "$ENV_FILE"
    sed -i "s/^NCARD=.*/NCARD=$new_ncard/" "$ENV_FILE"
    sed -i "s/^ZCARD=.*/ZCARD=$new_zcard/" "$ENV_FILE"
    
    print_success "Configuration √©conomique mise √† jour"
    
    # R√©sum√©
    echo ""
    echo -e "${BLUE}üìä R√©sum√© de votre configuration:${NC}"
    echo -e "   ‚Ä¢ PAF: ${YELLOW}$new_paf ·∫êen/semaine${NC} (vos co√ªts)"
    echo -e "   ‚Ä¢ MULTIPASS: ${YELLOW}$new_ncard ·∫êen/semaine${NC} (vos revenus)"
    echo -e "   ‚Ä¢ ZEN Card: ${YELLOW}$new_zcard ·∫êen/semaine${NC} (vos revenus)"
    echo -e "   ‚Ä¢ B√©n√©fice potentiel: ${GREEN}$(echo "($new_ncard + $new_zcard) - $new_paf" | bc) ·∫êen/semaine${NC} (par utilisateur)"
    echo ""
}

# √âtape 3: Valorisation machine
step_machine_valuation() {
    print_section "VALORISATION DE VOTRE MACHINE"
    
    echo -e "${BLUE}üíª √âvaluation de votre capital machine:${NC}"
    echo ""
    
    # D√©tecter et sugg√©rer le type de machine
    local suggested_type=$(suggest_machine_type)
    echo ""
    
    echo -e "${CYAN}Types de valorisation disponibles:${NC}"
    echo -e "  1. üõ∞Ô∏è  ${YELLOW}Satellite${NC} (500‚Ç¨ ‚Üí 500 ·∫êen) - RPi, mini-PC"
    echo -e "  2. üéÆ ${YELLOW}PC Gamer${NC} (4000‚Ç¨ ‚Üí 4000 ·∫êen) - Station puissante"
    echo -e "  3. üíº ${YELLOW}Serveur Pro${NC} (8000‚Ç¨ ‚Üí 8000 ·∫êen) - Infrastructure professionnelle"
    echo -e "  4. üîß ${YELLOW}Personnalis√©e${NC} - Valorisation sur mesure"
    echo ""
    
    local default_choice="1"
    case "$suggested_type" in
        "constellation") default_choice="3" ;;
        "pc_gamer") default_choice="2" ;;
        *) default_choice="1" ;;
    esac
    
    read -p "Choisissez le type de valorisation [$default_choice]: " machine_choice
    machine_choice="${machine_choice:-$default_choice}"
    
    local machine_value=""
    local machine_type=""
    
    case "$machine_choice" in
        1)
            machine_value="500"
            machine_type="Satellite"
            ;;
        2)
            machine_value="4000"
            machine_type="PC Gamer"
            ;;
        3)
            machine_value="8000"
            machine_type="Serveur Pro"
            ;;
        4)
            echo ""
            echo -e "${CYAN}Valorisation personnalis√©e:${NC}"
            echo "   Estimez la valeur de votre machine (co√ªt d'achat ou remplacement)"
            read -p "Valeur en euros: " custom_value
            if [[ "$custom_value" =~ ^[0-9]+$ ]] && [[ "$custom_value" -gt 0 ]]; then
                machine_value="$custom_value"
                machine_type="Machine personnalis√©e"
            else
                print_error "Valeur invalide, utilisation de la valeur par d√©faut (500‚Ç¨)"
                machine_value="500"
                machine_type="Satellite"
            fi
            ;;
        *)
            print_warning "Choix invalide, utilisation de la valeur par d√©faut"
            machine_value="500"
            machine_type="Satellite"
            ;;
    esac
    
    # Mettre √† jour le fichier .env (uniquement les param√®tres √©conomiques)
    sed -i "s/^MACHINE_VALUE_ZEN=.*/MACHINE_VALUE_ZEN=$machine_value/" "$ENV_FILE"
    sed -i "s/^MACHINE_TYPE=.*/MACHINE_TYPE=\"$machine_type\"/" "$ENV_FILE"
    
    # Note: Les ressources syst√®me sont maintenant obtenues dynamiquement via heartbox_analysis.sh
    # Plus besoin de les stocker dans .env
    
    print_success "Valorisation machine configur√©e"
    
    echo ""
    echo -e "${BLUE}üí∞ Votre apport au capital social:${NC}"
    echo -e "   ‚Ä¢ Type: ${YELLOW}$machine_type${NC}"
    echo -e "   ‚Ä¢ Valeur: ${YELLOW}$machine_value ‚Ç¨${NC} = ${CYAN}$machine_value ·∫êen${NC}"
    echo -e "   ‚Ä¢ Parts sociales: Vous devenez soci√©taire de la coop√©rative"
    echo -e "   ‚Ä¢ Droits: Vote, gouvernance, r√©partition des b√©n√©fices"
    echo ""
}

# Variable globale pour le parcours choisi
UPLANET_MODE=""

# √âtape 4: Choix du mode UPlanet
step_uplanet_mode_choice() {
    print_section "CHOIX DU MODE UPLANET"
    
    # Si FORCE_ZEN_MODE est d√©fini (migration depuis update_config.sh)
    if [[ "$FORCE_ZEN_MODE" == "true" ]]; then
        print_info "Migration ORIGIN ‚Üí ·∫êEN en cours..."
        UPLANET_MODE="zen"
        
        # Effectuer le nettoyage ORIGIN ‚Üí ·∫êEN
        cleanup_origin_to_zen
        
        echo ""
        print_success "Mode UPlanet ·∫êEN forc√© pour la migration"
        return 0
    fi
    
    echo -e "${BLUE}üéØ Choisissez votre mode UPlanet:${NC}"
    echo ""
    
    # V√©rifier si swarm.key existe d√©j√†
    local has_swarm_key=false
    if [[ -f "$HOME/.ipfs/swarm.key" ]]; then
        has_swarm_key=true
        print_info "Cl√© swarm existante d√©tect√©e"
        echo -e "   Fichier: ${CYAN}$HOME/.ipfs/swarm.key${NC}"
        echo -e "   Mode actuel: ${YELLOW}UPlanet ·∫êEN (Niveau Y)${NC}"
        echo ""
    fi
    
    echo -e "${CYAN}Modes disponibles:${NC}"
    echo -e "  1. üåç ${YELLOW}UPlanet ORIGIN (Niveau X)${NC} - R√©seau public, √©conomie simplifi√©e"
    echo -e "  2. üè¥‚Äç‚ò†Ô∏è ${YELLOW}UPlanet ·∫êEN (Niveau Y)${NC} - R√©seau priv√©, √©conomie coop√©rative compl√®te"
    echo ""
    
    echo -e "${BLUE}üåç UPlanet ORIGIN (Niveau X):${NC}"
    echo "   ‚Ä¢ R√©seau IPFS public standard"
    echo "   ‚Ä¢ √âconomie UPlanet basique"
    echo "   ‚Ä¢ Initialisation UPLANET imm√©diate"
    echo "   ‚Ä¢ Pas de swarm.key n√©cessaire"
    echo "   ‚Ä¢ Id√©al pour d√©buter ou tester"
    echo ""
    
    echo -e "${BLUE}üè¥‚Äç‚ò†Ô∏è UPlanet ·∫êEN (Niveau Y):${NC}"
    echo "   ‚Ä¢ R√©seau IPFS priv√© avec swarm.key"
    echo "   ‚Ä¢ √âconomie coop√©rative compl√®te"
    echo "   ‚Ä¢ N√©cessite un ami capitaine ou BLOOM"
    echo "   ‚Ä¢ Passage au niveau Y obligatoire"
    echo "   ‚Ä¢ Production et gouvernance d√©centralis√©e"
    echo ""
    
    if [[ "$has_swarm_key" == true ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Attention: Vous avez d√©j√† une cl√© swarm (mode ·∫êEN actuel)${NC}"
        echo -e "   Choisir ORIGIN supprimera la cl√© swarm et les wallets ·∫êEN existants"
        echo ""
    fi
    
    local default_choice="1"
    if [[ "$has_swarm_key" == true ]]; then
        default_choice="2"
    fi
    
    read -p "Choisissez votre mode [$default_choice]: " mode_choice
    mode_choice="${mode_choice:-$default_choice}"
    
    case "$mode_choice" in
        1)
            UPLANET_MODE="origin"
            print_success "Mode UPlanet ORIGIN (Niveau X) s√©lectionn√©"
            
            if [[ "$has_swarm_key" == true ]]; then
                echo ""
                print_error "Passage de ·∫êEN vers ORIGIN impossible !"
                echo -e "${RED}Une fois en mode ·∫êEN, vous ne pouvez pas revenir √† ORIGIN${NC}"
                echo -e "${YELLOW}Raisons techniques:${NC}"
                echo "   ‚Ä¢ Les comptes sont li√©s √† la source primale ·∫êEN"
                echo "   ‚Ä¢ La d√©sinscription compl√®te est complexe"
                echo "   ‚Ä¢ Risque de perte de donn√©es et de fonds"
                echo ""
                echo -e "${CYAN}Solutions:${NC}"
                echo "   ‚Ä¢ Restez en mode ·∫êEN (recommand√©)"
                echo "   ‚Ä¢ R√©installez Astroport.ONE sur un OS frais pour ORIGIN"
                echo ""
                print_info "Conservation forc√©e du mode ·∫êEN actuel"
                UPLANET_MODE="zen"
                return 0
            fi
            ;;
        2)
            UPLANET_MODE="zen"
            print_success "Mode UPlanet ·∫êEN (Niveau Y) s√©lectionn√©"
            
            if [[ "$has_swarm_key" == false ]]; then
                # Passage ORIGIN ‚Üí ·∫êEN : d√©sinscription n√©cessaire
                if [[ -d "$HOME/.zen/game/nostr" ]] || [[ -d "$HOME/.zen/game/players" ]]; then
                    echo ""
                    print_warning "Passage ORIGIN ‚Üí ·∫êEN d√©tect√©"
                    echo -e "${YELLOW}Comptes ORIGIN existants d√©tect√©s${NC}"
                    echo -e "${RED}Ces comptes doivent √™tre d√©sinscrits car ils proviennent${NC}"
                    echo -e "${RED}de la mauvaise source primale (EnfinLibre vs swarm.key)${NC}"
                    echo ""
                    echo -e "${CYAN}Actions qui seront effectu√©es:${NC}"
                    echo "   ‚Ä¢ D√©sinscription de tous les MULTIPASS NOSTR"
                    echo "   ‚Ä¢ D√©sinscription de toutes les ZEN Card PLAYER"
                    echo "   ‚Ä¢ Suppression des wallets coop√©ratifs ORIGIN"
                    echo "   ‚Ä¢ Nettoyage du cache"
                    echo ""
                    read -p "Confirmer le passage ORIGIN ‚Üí ·∫êEN ? (o/N): " confirm_zen
                    if [[ "$confirm_zen" != "o" && "$confirm_zen" != "O" ]]; then
                        print_info "Annulation - conservation du mode ORIGIN"
                        UPLANET_MODE="origin"
                        return 0
                    fi
                    
                    # Nettoyer les comptes ORIGIN
                    cleanup_origin_to_zen
                fi
                echo -e "${CYAN}Vous devrez obtenir une swarm.key pour rejoindre un r√©seau ·∫êEN${NC}"
            fi
            ;;
        *)
            print_warning "Choix invalide, s√©lection du mode ORIGIN par d√©faut"
            UPLANET_MODE="origin"
            ;;
    esac
    
    echo ""
    print_info "Mode s√©lectionn√©: $UPLANET_MODE"
}

# Fonction de nettoyage lors du passage ORIGIN ‚Üí ·∫êEN
cleanup_origin_to_zen() {
    print_info "Nettoyage ORIGIN pour passage vers ·∫êEN..."
    
    # D√©sinscription de tous les MULTIPASS et ZEN Card ORIGIN
    print_warning "D√©sinscription des comptes ORIGIN (source primale incorrecte)..."
    
    # D√©sinscription des MULTIPASS NOSTR
    if [[ -d "$HOME/.zen/game/nostr" ]]; then
        for nostr_dir in "$HOME/.zen/game/nostr"/*@*.*; do
            if [[ -d "$nostr_dir" ]]; then
                local email=$(basename "$nostr_dir")
                print_info "D√©sinscription MULTIPASS: $email"
                
                # Utiliser nostr_DESTROY_TW.sh pour d√©sinscription propre
                if [[ -f "$MY_PATH/tools/nostr_DESTROY_TW.sh" ]]; then
                    "$MY_PATH/tools/nostr_DESTROY_TW.sh" "$email" 2>/dev/null || true
                else
                    # Nettoyage manuel si le script n'existe pas
                    rm -rf "$nostr_dir"
                fi
            fi
        done
    fi
    
    # D√©sinscription des ZEN Card PLAYER
    if [[ -d "$HOME/.zen/game/players" ]]; then
        for player_dir in "$HOME/.zen/game/players"/*@*.*; do
            if [[ -d "$player_dir" ]]; then
                local email=$(basename "$player_dir")
                print_info "D√©sinscription ZEN Card: $email"
                
                # Utiliser PLAYER.unplug.sh si disponible
                if [[ -f "$MY_PATH/RUNTIME/PLAYER.unplug.sh" && -f "$player_dir/ipfs/moa/index.html" ]]; then
                    "$MY_PATH/RUNTIME/PLAYER.unplug.sh" "$player_dir/ipfs/moa/index.html" "$email" "ALL" 2>/dev/null || true
                else
                    # Nettoyage manuel
                    rm -rf "$player_dir"
                fi
            fi
        done
    fi
    
    # Supprimer les wallets coop√©ratifs ORIGIN
    local origin_wallets=(
        "$HOME/.zen/game/uplanet.dunikey"
        "$HOME/.zen/game/uplanet.SOCIETY.dunikey"
        "$HOME/.zen/game/uplanet.CASH.dunikey"
        "$HOME/.zen/game/uplanet.RnD.dunikey"
        "$HOME/.zen/game/uplanet.ASSETS.dunikey"
        "$HOME/.zen/game/uplanet.IMPOT.dunikey"
        "$HOME/.zen/game/secret.NODE.dunikey"
    )
    
    for wallet in "${origin_wallets[@]}"; do
        if [[ -f "$wallet" ]]; then
            rm -f "$wallet"
            print_info "Wallet ORIGIN supprim√©: $(basename "$wallet")"
        fi
    done
    
    # Supprimer les fichiers de configuration ORIGIN
    rm -f "$HOME/.zen/tmp/UPLANETG1PUB"
    rm -f "$HOME/.zen/game/MY_boostrap_nodes.txt"
    rm -f "$HOME/.zen/game/My_boostrap_ssh.txt"
    
    # Nettoyer le cache
    rm -f "$HOME/.zen/tmp/coucou"/*.* 2>/dev/null || true
    
    print_success "Nettoyage ORIGIN ‚Üí ·∫êEN termin√©"
    print_warning "Tous les comptes ORIGIN ont √©t√© d√©sinscrits"
}


# √âtape 5: Configuration r√©seau (selon le mode)
step_network_configuration() {
    if [[ "$UPLANET_MODE" == "origin" ]]; then
        step_network_origin
    elif [[ "$UPLANET_MODE" == "zen" ]]; then
        step_network_zen
    else
        print_error "Mode UPlanet non d√©fini"
        return 1
    fi
}

# Configuration r√©seau pour UPlanet ORIGIN
step_network_origin() {
    print_section "CONFIGURATION R√âSEAU ORIGIN"
    
    echo -e "${BLUE}üåç Configuration UPlanet ORIGIN (Niveau X):${NC}"
    echo ""
    
    # S'assurer qu'il n'y a pas de swarm.key (mode public)
    if [[ -f "$HOME/.ipfs/swarm.key" ]]; then
        print_info "Suppression de la cl√© swarm pour rester en mode public"
        rm -f "$HOME/.ipfs/swarm.key"
        restart_ipfs_service
    fi
    
    print_success "Configuration r√©seau ORIGIN termin√©e"
    echo -e "${CYAN}Vous √™tes maintenant sur le r√©seau IPFS public${NC}"
}

# Configuration r√©seau pour UPlanet ·∫êEN
step_network_zen() {
    print_section "CONFIGURATION R√âSEAU ·∫êEN"
    
    echo -e "${BLUE}üè¥‚Äç‚ò†Ô∏è Configuration UPlanet ·∫êEN (Niveau Y):${NC}"
    echo ""
    
    # V√©rifier si swarm.key existe d√©j√†
    if [[ -f "$HOME/.ipfs/swarm.key" ]]; then
        print_info "Cl√© swarm ·∫êEN existante trouv√©e"
        echo -e "   Fichier: ${CYAN}$HOME/.ipfs/swarm.key${NC}"
        
        # Afficher l'UPLANETNAME actuel
        local current_uplanetname=$(cat "$HOME/.ipfs/swarm.key" 2>/dev/null | head -c 20)
        echo -e "   UPlanet actuelle: ${YELLOW}${current_uplanetname}...${NC}"
        echo ""
        
        print_error "Changement d'UPlanet ·∫êEN impossible !"
        echo -e "${RED}Une fois connect√© √† une UPlanet ·∫êEN, vous ne pouvez pas${NC}"
        echo -e "${RED}changer vers une autre UPlanet sans r√©installation compl√®te.${NC}"
        echo ""
        echo -e "${YELLOW}Raisons techniques:${NC}"
        echo "   ‚Ä¢ Les comptes sont li√©s √† l'UPLANETNAME actuel"
        echo "   ‚Ä¢ Les sources primales sont diff√©rentes entre UPlanet"
        echo "   ‚Ä¢ La migration n√©cessite une d√©sinscription compl√®te"
        echo "   ‚Ä¢ Risque de perte de donn√©es et de fonds"
        echo ""
        echo -e "${CYAN}Solutions:${NC}"
        echo "   ‚Ä¢ Restez sur votre UPlanet ·∫êEN actuelle (recommand√©)"
        echo "   ‚Ä¢ R√©installez Astroport.ONE sur un OS frais pour changer"
        echo ""
        print_success "Conservation de la configuration UPlanet ·∫êEN actuelle"
        return 0
    fi
    
    echo -e "${CYAN}Options de connexion au r√©seau UPlanet ·∫êEN:${NC}"
    echo -e "  1. ü§ù ${YELLOW}Rejoindre UPlanet existante${NC} (ami capitaine - recommand√©)"
    echo -e "  2. üåç ${YELLOW}Formation automatique BLOOM${NC} (9+ stations m√™me r√©gion)"
    echo -e "  3. üè† ${YELLOW}R√©seau local/priv√©${NC} (fournir swarm.key)"
    echo -e "  4. üîß ${YELLOW}Configuration manuelle${NC}"
    echo ""
    
    read -p "Choisissez votre mode de connexion [1]: " network_choice
    network_choice="${network_choice:-1}"
    
    case "$network_choice" in
        1)
            echo ""
            print_info "Rejoindre une UPlanet ·∫êEN existante..."
            echo ""
            echo -e "${CYAN}Pour rejoindre une UPlanet existante, vous devez:${NC}"
            echo "   1. √ätre ami avec un Capitaine d'un relais Astroport"
            echo "   2. R√©cup√©rer manuellement le fichier swarm.key"
            echo ""
            echo -e "${BLUE}Transfert SSH (~/.ssh/authorized.keys):${NC}"
            echo -e "   ‚Ä¢ ${CYAN}Capitaine ami${NC}: scp captain@armateurnode.oooz.fr:~/.ipfs/swarm.key"
            echo ""
            echo -e "${YELLOW}Contactez un capitaine ami pour obtenir la swarm.key${NC}"
            echo -e "${CYAN}Puis placez-la dans: $HOME/.ipfs/swarm.key${NC}"
            ;;
        2)
            echo ""
            print_info "Formation automatique d'un swarm via BLOOM.Me.sh..."
            echo ""
            echo -e "${CYAN}Conditions requises pour BLOOM automatique:${NC}"
            echo "   ‚Ä¢ Minimum 9 stations Astroport niveau Y dans la m√™me r√©gion GPS"
            echo "   ‚Ä¢ Concordance SSH ‚Üî IPFS NodeID sur chaque station"
            echo "   ‚Ä¢ Connectivit√© WAN (IP publique)"
            echo ""
            
            # V√©rifier si BLOOM.Me.sh existe
            if [[ -f "$MY_PATH/RUNTIME/BLOOM.Me.sh" ]]; then
                read -p "Lancer BLOOM.Me.sh maintenant ? (O/n): " launch_bloom
                if [[ "$launch_bloom" != "n" && "$launch_bloom" != "N" ]]; then
                    print_info "Lancement de BLOOM.Me.sh..."
                    if "$MY_PATH/RUNTIME/BLOOM.Me.sh"; then
                        print_success "BLOOM.Me.sh ex√©cut√© - v√©rifiez si un swarm s'est form√©"
                    else
                        print_warning "BLOOM.Me.sh termin√© - pas assez de stations ou conditions non remplies"
                    fi
                else
                    print_info "BLOOM.Me.sh sera ex√©cut√© automatiquement par le syst√®me"
                fi
            else
                print_error "Script BLOOM.Me.sh non trouv√©"
            fi
            ;;
        3)
            echo ""
            echo -e "${CYAN}Configuration r√©seau local/priv√©:${NC}"
            echo "   Vous devez obtenir le fichier swarm.key du r√©seau que vous souhaitez rejoindre"
            echo ""
            read -p "Chemin vers le fichier swarm.key: " swarm_key_path
            
            if [[ -f "$swarm_key_path" ]]; then
                cp "$swarm_key_path" "$HOME/.ipfs/swarm.key"
                print_success "Cl√© swarm copi√©e"
                restart_ipfs_service
            else
                print_error "Fichier swarm.key non trouv√©: $swarm_key_path"
            fi
            ;;
        4)
            print_info "Configuration manuelle s√©lectionn√©e"
            echo -e "${YELLOW}Vous devrez configurer manuellement:${NC}"
            echo "   ‚Ä¢ La cl√© swarm: $HOME/.ipfs/swarm.key"
            echo "   ‚Ä¢ Les param√®tres r√©seau dans: $ENV_FILE"
            ;;
        *)
            print_warning "Choix invalide, configuration manuelle requise"
            ;;
    esac
    
    echo ""
    print_info "Configuration r√©seau termin√©e"
}

# √âtape 6: Initialisation UPLANET (selon le mode)
step_uplanet_initialization() {
    if [[ "$UPLANET_MODE" == "origin" ]]; then
        step_uplanet_init_origin
    elif [[ "$UPLANET_MODE" == "zen" ]]; then
        step_uplanet_init_zen
    else
        print_error "Mode UPlanet non d√©fini"
        return 1
    fi
}

# Initialisation UPLANET pour mode ORIGIN
step_uplanet_init_origin() {
    print_section "INITIALISATION UPLANET ORIGIN"
    
    echo -e "${BLUE}üåç Initialisation UPlanet ORIGIN (Niveau X):${NC}"
    echo ""
    
    # V√©rifier si UPLANET.init.sh existe
    if [[ ! -f "$MY_PATH/UPLANET.init.sh" ]]; then
        print_error "Script UPLANET.init.sh non trouv√©"
        return 1
    fi
    
    print_info "Lancement de UPLANET.init.sh pour le mode ORIGIN..."
    echo -e "${CYAN}Ce script va:${NC}"
    echo "   ‚Ä¢ Cr√©er les portefeuilles coop√©ratifs de base"
    echo "   ‚Ä¢ Initialiser les cl√©s cryptographiques"
    echo "   ‚Ä¢ Configurer l'√©conomie UPlanet simplifi√©e"
    echo "   ‚Ä¢ Pr√©parer l'infrastructure pour le niveau X"
    echo ""
    
    read -p "Lancer l'initialisation UPLANET ORIGIN ? (O/n): " launch_init
    if [[ "$launch_init" != "n" && "$launch_init" != "N" ]]; then
        echo ""
        print_info "Initialisation ORIGIN en cours..."
        
        # Lancer UPLANET.init.sh
        if "$MY_PATH/UPLANET.init.sh"; then
            print_success "Initialisation UPLANET ORIGIN termin√©e avec succ√®s"
            print_success "Votre station est pr√™te en mode ORIGIN (Niveau X)"
        else
            print_error "Erreur lors de l'initialisation UPLANET ORIGIN"
            echo -e "${YELLOW}Vous pouvez relancer manuellement:${NC}"
            echo -e "${CYAN}$MY_PATH/UPLANET.init.sh${NC}"
            return 1
        fi
    else
        print_warning "Initialisation UPLANET ORIGIN report√©e"
        echo -e "${YELLOW}Vous devrez lancer manuellement:${NC}"
        echo -e "${CYAN}$MY_PATH/UPLANET.init.sh${NC}"
    fi
}

# Initialisation UPLANET pour mode ·∫êEN (apr√®s niveau Y)
step_uplanet_init_zen() {
    print_section "INITIALISATION UPLANET ·∫êEN"
    
    echo -e "${BLUE}üè¥‚Äç‚ò†Ô∏è Initialisation UPlanet ·∫êEN (Niveau Y):${NC}"
    echo ""
    
    # V√©rifier si la swarm.key est install√©e
    if [[ ! -f "$HOME/.ipfs/swarm.key" ]]; then
        print_error "Aucune cl√© swarm trouv√©e !"
        echo -e "${YELLOW}Pour le mode ·∫êEN, vous devez d'abord:${NC}"
        echo "   1. Obtenir une swarm.key d'un capitaine ami ou via BLOOM"
        echo "   2. La placer dans ~/.ipfs/swarm.key"
        echo "   3. Passer au niveau Y"
        echo "   4. Puis relancer cette initialisation"
        echo ""
        print_warning "Initialisation ·∫êEN impossible sans swarm.key"
        return 1
    fi
    
    # V√©rifier si on est au niveau Y
    if [[ ! -f "$HOME/.zen/tmp/UPLANETG1PUB" ]]; then
        print_warning "Niveau Y non d√©tect√©"
        echo -e "${YELLOW}L'initialisation ·∫êEN n√©cessite le passage au niveau Y${NC}"
        echo -e "${CYAN}L'initialisation sera faite apr√®s le passage au niveau Y${NC}"
        return 0
    fi
    
    # V√©rifier si UPLANET.init.sh existe
    if [[ ! -f "$MY_PATH/UPLANET.init.sh" ]]; then
        print_error "Script UPLANET.init.sh non trouv√©"
        return 1
    fi
    
    print_success "Cl√© swarm et niveau Y d√©tect√©s - pr√™t pour l'initialisation ·∫êEN"
    echo ""
    
    print_info "Lancement de UPLANET.init.sh pour le mode ·∫êEN..."
    echo -e "${CYAN}Ce script va:${NC}"
    echo "   ‚Ä¢ Cr√©er tous les portefeuilles coop√©ratifs ·∫êEN"
    echo "   ‚Ä¢ Initialiser les cl√©s cryptographiques"
    echo "   ‚Ä¢ Configurer les sources primales avec UPLANETNAME"
    echo "   ‚Ä¢ Pr√©parer l'√©conomie coop√©rative compl√®te"
    echo "   ‚Ä¢ Synchroniser avec le r√©seau ·∫êEN"
    echo ""
    
    read -p "Lancer l'initialisation UPLANET ·∫êEN ? (O/n): " launch_init
    if [[ "$launch_init" != "n" && "$launch_init" != "N" ]]; then
        echo ""
        print_info "Initialisation ·∫êEN en cours..."
        
        # Lancer UPLANET.init.sh
        if "$MY_PATH/UPLANET.init.sh"; then
            print_success "Initialisation UPLANET ·∫êEN termin√©e avec succ√®s"
            print_success "Votre station est maintenant int√©gr√©e au r√©seau ·∫êEN !"
        else
            print_error "Erreur lors de l'initialisation UPLANET ·∫êEN"
            echo -e "${YELLOW}Vous pouvez relancer manuellement:${NC}"
            echo -e "${CYAN}$MY_PATH/UPLANET.init.sh${NC}"
            return 1
        fi
    else
        print_warning "Initialisation UPLANET ·∫êEN report√©e"
        echo -e "${YELLOW}Vous devrez lancer manuellement:${NC}"
        echo -e "${CYAN}$MY_PATH/UPLANET.init.sh${NC}"
    fi
}

# √âtape 7: Passage au niveau Y (seulement pour mode ·∫êEN)
step_y_level_upgrade() {
    if [[ "$UPLANET_MODE" == "zen" ]]; then
        step_y_level_zen
    elif [[ "$UPLANET_MODE" == "origin" ]]; then
        step_skip_y_level_origin
    else
        print_error "Mode UPlanet non d√©fini"
        return 1
    fi
}

# Passage au niveau Y pour mode ·∫êEN
step_y_level_zen() {
    print_section "PASSAGE AU NIVEAU Y - ·∫êEN"
    
    echo -e "${BLUE}üöÄ √âvolution vers le niveau Y (Autonome ·∫êEN):${NC}"
    echo ""
    echo -e "${CYAN}Le niveau Y ·∫êEN vous permet de:${NC}"
    echo "   ‚Ä¢ Devenir un n≈ìud autonome du r√©seau ·∫êEN"
    echo "   ‚Ä¢ Participer √† l'√©conomie coop√©rative automatis√©e"
    echo "   ‚Ä¢ Recevoir des paiements automatiques"
    echo "   ‚Ä¢ Contribuer √† la gouvernance d√©centralis√©e"
    echo "   ‚Ä¢ Synchroniser avec les autres capitaines ·∫êEN"
    echo ""
    
    # V√©rifier si Ylevel.sh existe
    if [[ ! -f "$MY_PATH/tools/Ylevel.sh" ]]; then
        print_error "Script Ylevel.sh non trouv√©"
        return 1
    fi
    
    # V√©rifier que la swarm.key est bien install√©e
    if [[ ! -f "$HOME/.ipfs/swarm.key" ]]; then
        print_error "Cl√© swarm manquante pour le niveau Y ·∫êEN !"
        echo -e "${YELLOW}Le niveau Y n√©cessite une swarm.key install√©e${NC}"
        return 1
    fi
    
    read -p "Passer au niveau Y ·∫êEN maintenant ? (O/n): " upgrade_y
    if [[ "$upgrade_y" != "n" && "$upgrade_y" != "N" ]]; then
        echo ""
        print_info "Passage au niveau Y ·∫êEN en cours..."
        
        # Lancer Ylevel.sh
        if "$MY_PATH/tools/Ylevel.sh"; then
            print_success "Passage au niveau Y ·∫êEN termin√© avec succ√®s"
            print_success "Votre station est maintenant autonome dans le r√©seau ·∫êEN !"
            
            # Apr√®s le passage au niveau Y, relancer l'initialisation UPLANET ·∫êEN
            echo ""
            print_info "Maintenant que vous √™tes au niveau Y, initialisation UPLANET ·∫êEN..."
            step_uplanet_init_zen
        else
            print_error "Erreur lors du passage au niveau Y ·∫êEN"
            echo -e "${YELLOW}Vous pouvez relancer manuellement:${NC}"
            echo -e "${CYAN}$MY_PATH/tools/Ylevel.sh${NC}"
            return 1
        fi
    else
        print_warning "Passage au niveau Y ·∫êEN report√©"
        echo -e "${YELLOW}Vous pouvez passer au niveau Y plus tard avec:${NC}"
        echo -e "${CYAN}$MY_PATH/tools/Ylevel.sh${NC}"
        echo -e "${YELLOW}N'oubliez pas de relancer l'initialisation UPLANET apr√®s !${NC}"
    fi
}

# Pas de niveau Y pour mode ORIGIN
step_skip_y_level_origin() {
    print_section "NIVEAU X - ORIGIN"
    
    echo -e "${BLUE}üåç Vous restez au niveau X (UPlanet ORIGIN):${NC}"
    echo ""
    echo -e "${CYAN}Le niveau X ORIGIN vous offre:${NC}"
    echo "   ‚Ä¢ Acc√®s au r√©seau IPFS public"
    echo "   ‚Ä¢ √âconomie UPlanet simplifi√©e"
    echo "   ‚Ä¢ Services d'h√©bergement de base"
    echo "   ‚Ä¢ Pas de complexit√© de r√©seau priv√©"
    echo "   ‚Ä¢ Id√©al pour d√©buter ou tester"
    echo ""
    
    print_success "Configuration niveau X ORIGIN termin√©e"
    echo -e "${CYAN}Votre station fonctionne en mode simplifi√©${NC}"
}

# √âtape 7: Premier embarquement capitaine
step_captain_onboarding() {
    print_section "EMBARQUEMENT CAPITAINE"
    
    echo -e "${BLUE}üè¥‚Äç‚ò†Ô∏è Cr√©ation de votre identit√© de Capitaine:${NC}"
    echo ""
    
    # V√©rifier s'il y a d√©j√† un capitaine
    if [[ -d "$HOME/.zen/game/players" ]] && [[ $(ls -1 "$HOME/.zen/game/players" | grep "@" | wc -l) -gt 0 ]]; then
        print_info "Capitaine(s) existant(s) d√©tect√©(s)"
        
        echo -e "${CYAN}Capitaines existants:${NC}"
        for player_dir in "$HOME/.zen/game/players"/*@*.*/; do
            if [[ -d "$player_dir" ]]; then
                local player_name=$(basename "$player_dir")
                echo -e "   ‚Ä¢ ${GREEN}$player_name${NC}"
            fi
        done
        
        echo ""
        read -p "Cr√©er un nouveau capitaine ? (o/N): " create_new
        if [[ "$create_new" != "o" && "$create_new" != "O" ]]; then
            print_info "Conservation des capitaines existants"
            return 0
        fi
    fi
    
    echo -e "${CYAN}Lancement de l'assistant d'embarquement...${NC}"
    echo ""
    
    # V√©rifier si captain.sh existe
    if [[ ! -f "$MY_PATH/captain.sh" ]]; then
        print_error "Script captain.sh non trouv√©"
        return 1
    fi
    
    print_info "Lancement de captain.sh..."
    "$MY_PATH/captain.sh"
}

# √âtape 8: R√©sum√© et prochaines √©tapes
step_final_summary() {
    print_section "EMBARQUEMENT TERMIN√â"
    
    echo -e "${GREEN}üéâ F√©licitations ! Votre embarquement UPlanet est termin√© !${NC}"
    echo ""
    
    # Afficher le mode s√©lectionn√©
    if [[ "$UPLANET_MODE" == "origin" ]]; then
        echo -e "${BLUE}üåç Mode s√©lectionn√©: ${YELLOW}UPlanet ORIGIN (Niveau X)${NC}"
        echo -e "   R√©seau IPFS public, √©conomie simplifi√©e"
    elif [[ "$UPLANET_MODE" == "zen" ]]; then
        echo -e "${BLUE}üè¥‚Äç‚ò†Ô∏è Mode s√©lectionn√©: ${YELLOW}UPlanet ·∫êEN (Niveau Y)${NC}"
        echo -e "   R√©seau IPFS priv√©, √©conomie coop√©rative compl√®te"
    fi
    echo ""
    
    echo -e "${BLUE}üìã R√©capitulatif de votre configuration:${NC}"
    
    # Lire la configuration √©conomique
    local paf=$(grep "^PAF=" "$ENV_FILE" 2>/dev/null | cut -d'=' -f2 || echo "N/A")
    local ncard=$(grep "^NCARD=" "$ENV_FILE" 2>/dev/null | cut -d'=' -f2 || echo "N/A")
    local zcard=$(grep "^ZCARD=" "$ENV_FILE" 2>/dev/null | cut -d'=' -f2 || echo "N/A")
    local machine_value=$(grep "^MACHINE_VALUE_ZEN=" "$ENV_FILE" 2>/dev/null | cut -d'=' -f2 || echo "N/A")
    local machine_type=$(grep "^MACHINE_TYPE=" "$ENV_FILE" 2>/dev/null | cut -d'=' -f2 | tr -d '"' || echo "N/A")
    
    echo -e "   ‚Ä¢ PAF: ${YELLOW}$paf ·∫êen/semaine${NC}"
    echo -e "   ‚Ä¢ MULTIPASS: ${YELLOW}$ncard ·∫êen/semaine${NC}"
    echo -e "   ‚Ä¢ ZEN Card: ${YELLOW}$zcard ·∫êen/semaine${NC}"
    echo -e "   ‚Ä¢ Machine: ${YELLOW}$machine_type${NC} (${CYAN}$machine_value ·∫êen${NC})"
    echo ""
    
    # Afficher les capacit√©s actuelles via heartbox_analysis.sh
    local capacities=$(get_system_capacities)
    local zencard_slots=$(echo "$capacities" | cut -d'|' -f1)
    local nostr_slots=$(echo "$capacities" | cut -d'|' -f2)
    local available_space=$(echo "$capacities" | cut -d'|' -f3)
    
    echo -e "${BLUE}üìä Capacit√©s d'h√©bergement actuelles:${NC}"
    echo -e "   ‚Ä¢ ZEN Cards disponibles: ${GREEN}$zencard_slots slots${NC} (128Go chacune)"
    echo -e "   ‚Ä¢ MULTIPASS disponibles: ${GREEN}$nostr_slots slots${NC} (10Go chacune)"
    echo -e "   ‚Ä¢ Espace total disponible: ${CYAN}$available_space Go${NC}"
    
    # Calcul du potentiel de revenus
    if [[ "$zencard_slots" != "0" && "$nostr_slots" != "0" && "$zcard" != "N/A" && "$ncard" != "N/A" ]]; then
        local max_revenue_zen=$(echo "($zencard_slots * $zcard) + ($nostr_slots * $ncard)" | bc 2>/dev/null || echo "N/A")
        local net_revenue_zen=$(echo "$max_revenue_zen - $paf" | bc 2>/dev/null || echo "N/A")
        echo -e "   ‚Ä¢ Revenus max th√©oriques: ${YELLOW}$max_revenue_zen ·∫êen/semaine${NC}"
        echo -e "   ‚Ä¢ B√©n√©fice net max: ${GREEN}$net_revenue_zen ·∫êen/semaine${NC} (apr√®s PAF)"
    fi
    echo ""
    
    echo -e "${BLUE}üéØ Prochaines √©tapes:${NC}"
    echo ""
    echo -e "${CYAN}1. Interface principale:${NC}"
    echo -e "   ${WHITE}~/.zen/Astroport.ONE/tools/dashboard.sh${NC}"
    echo -e "   Vue d'ensemble et actions rapides quotidiennes"
    echo ""
    echo -e "${CYAN}2. Virements officiels:${NC}"
    echo -e "   ${WHITE}~/.zen/Astroport.ONE/UPLANET.official.sh${NC}"
    echo -e "   √âmission de ·∫êen pour locataires et soci√©taires"
    echo ""
    echo -e "${CYAN}3. Analyse √©conomique:${NC}"
    echo -e "   ${WHITE}~/.zen/Astroport.ONE/tools/zen.sh${NC}"
    echo -e "   Diagnostic et analyse des portefeuilles"
    echo ""
    echo -e "${CYAN}4. Gestion capitaines:${NC}"
    echo -e "   ${WHITE}~/.zen/Astroport.ONE/captain.sh${NC}"
    echo -e "   Embarquement nouveaux utilisateurs"
    echo ""
    
    echo -e "${BLUE}üìö Documentation:${NC}"
    echo -e "   ‚Ä¢ Constitution ·∫êEN: ${CYAN}~/.zen/Astroport.ONE/RUNTIME/ZEN.ECONOMY.readme.md${NC}"
    echo -e "   ‚Ä¢ R√¥les des scripts: ${CYAN}~/.zen/Astroport.ONE/SCRIPTS.ROLES.md${NC}"
    echo -e "   ‚Ä¢ Support: ${CYAN}support@qo-op.com${NC}"
    echo ""
    
    echo -e "${BLUE}üåê Acc√®s Web:${NC}"
    echo -e "   ‚Ä¢ Interface: ${CYAN}http://astroport.localhost/ipns/copylaradio.com${NC}"
    echo -e "   ‚Ä¢ API: ${CYAN}http://localhost:1234${NC}"
    echo ""
    
    # V√©rifier l'√©tat des services via heartbox_analysis.sh
    local heartbox_script="$MY_PATH/tools/heartbox_analysis.sh"
    if [[ -f "$heartbox_script" ]]; then
        local analysis_json=$("$heartbox_script" export --json 2>/dev/null)
        
        if [[ -n "$analysis_json" ]]; then
            echo -e "${BLUE}üîß √âtat des services:${NC}"
            
            local ipfs_active=$(echo "$analysis_json" | jq -r '.services.ipfs.active // false' 2>/dev/null)
            local astroport_active=$(echo "$analysis_json" | jq -r '.services.astroport.active // false' 2>/dev/null)
            local uspot_active=$(echo "$analysis_json" | jq -r '.services.uspot.active // false' 2>/dev/null)
            local nostr_active=$(echo "$analysis_json" | jq -r '.services.nostr_relay.active // false' 2>/dev/null)
            
            if [[ "$ipfs_active" == "true" ]]; then
                local ipfs_peers=$(echo "$analysis_json" | jq -r '.services.ipfs.peers_connected // 0' 2>/dev/null)
                echo -e "   ‚Ä¢ IPFS: ${GREEN}‚úÖ Actif${NC} ($ipfs_peers pairs connect√©s)"
            else
                echo -e "   ‚Ä¢ IPFS: ${RED}‚ùå Inactif${NC}"
            fi
            
            if [[ "$astroport_active" == "true" ]]; then
                echo -e "   ‚Ä¢ Astroport: ${GREEN}‚úÖ Actif${NC}"
            else
                echo -e "   ‚Ä¢ Astroport: ${RED}‚ùå Inactif${NC}"
            fi
            
            if [[ "$uspot_active" == "true" ]]; then
                echo -e "   ‚Ä¢ uSPOT: ${GREEN}‚úÖ Actif${NC} (port 54321)"
            else
                echo -e "   ‚Ä¢ uSPOT: ${RED}‚ùå Inactif${NC}"
            fi
            
            if [[ "$nostr_active" == "true" ]]; then
                echo -e "   ‚Ä¢ NOSTR Relay: ${GREEN}‚úÖ Actif${NC} (port 7777)"
            else
                echo -e "   ‚Ä¢ NOSTR Relay: ${RED}‚ùå Inactif${NC}"
            fi
            
            echo ""
        fi
    fi
    
    print_success "Bienvenue dans la coop√©rative UPlanet ·∫êEN !"
    echo -e "${YELLOW}Bon vent, Capitaine ! üè¥‚Äç‚ò†Ô∏è${NC}"
    echo ""
}

################################################################################
# Menu principal
################################################################################

show_menu() {
    print_header
    
    echo -e "${BLUE}üéØ Assistant d'embarquement UPlanet ·∫êEN${NC}"
    echo ""
    echo -e "${CYAN}√âtapes d'embarquement:${NC}"
    echo -e "  1. üìñ Pr√©sentation et introduction"
    echo -e "  2. üí∞ Configuration √©conomique (.env)"
    echo -e "  3. üíª Valorisation de votre machine"
    echo -e "  4. üéØ Choix du mode UPlanet (ORIGIN/·∫êEN)"
    echo -e "  5. üåê Configuration r√©seau"
    echo -e "  6. üèõÔ∏è  Initialisation UPLANET"
    echo -e "  7. üöÄ Passage au niveau Y (·∫êEN seulement)"
    echo -e "  8. üè¥‚Äç‚ò†Ô∏è Embarquement capitaine"
    echo -e "  9. üìã R√©sum√© et finalisation"
    echo ""
    echo -e "  ${GREEN}a${NC}. üöÄ Embarquement complet automatique"
    echo -e "  ${GREEN}c${NC}. üìä V√©rifier la configuration actuelle"
    echo -e "  ${GREEN}0${NC}. ‚ùå Quitter"
    echo ""
    
    read -p "Votre choix: " choice
    
    case "$choice" in
        1) step_introduction ;;
        2) step_economic_configuration ;;
        3) step_machine_valuation ;;
        4) step_uplanet_mode_choice ;;
        5) step_network_configuration ;;
        6) step_uplanet_initialization ;;
        7) step_y_level_upgrade ;;
        8) step_captain_onboarding ;;
        9) step_final_summary ;;
        a|A) 
            echo -e "${CYAN}üöÄ Embarquement complet automatique...${NC}"
            step_introduction && \
            step_economic_configuration && \
            step_machine_valuation && \
            step_uplanet_mode_choice && \
            step_network_configuration && \
            step_uplanet_initialization && \
            step_y_level_upgrade && \
            step_captain_onboarding && \
            step_final_summary
            ;;
        c|C)
            print_section "CONFIGURATION ACTUELLE"
            if [[ -f "$ENV_FILE" ]]; then
                echo -e "${GREEN}Fichier de configuration: $ENV_FILE${NC}"
                echo ""
                grep -E "^(PAF|NCARD|ZCARD|MACHINE_VALUE_ZEN|MACHINE_TYPE)=" "$ENV_FILE" 2>/dev/null || echo "Configuration de base non trouv√©e"
            else
                echo -e "${YELLOW}Aucune configuration trouv√©e${NC}"
            fi
            echo ""
            read -p "Appuyez sur Entr√©e pour continuer..."
            show_menu
            ;;
        0)
            echo -e "${GREEN}Au revoir ! Vous pouvez relancer cet assistant √† tout moment.${NC}"
            exit 0
            ;;
        *)
            print_error "Choix invalide"
            sleep 1
            show_menu
            ;;
    esac
}

################################################################################
# Point d'entr√©e principal
################################################################################

main() {
    # V√©rifier les pr√©requis
    if [[ ! -d "$HOME/.zen" ]]; then
        print_error "R√©pertoire ~/.zen non trouv√©. Astroport.ONE est-il install√© ?"
        exit 1
    fi
    
    # Cr√©er le r√©pertoire de configuration si n√©cessaire
    mkdir -p "$(dirname "$ENV_FILE")"
    
    # Lancer le menu principal
    show_menu
}

# Lancement du script
main "$@"
