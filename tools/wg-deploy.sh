#!/bin/bash
# WireGuard LAN Deployment Script - Automatise la configuration compl√®te

# Configuration des couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                        WIREGUARD LAN DEPLOYMENT                              ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

print_section() {
    echo -e "${CYAN}"
    echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
    printf "‚îÇ %-76s ‚îÇ\n" "$1"
    echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    echo -e "${NC}"
}

# V√©rification des d√©pendances
check_deps() {
    local missing_deps=()
    
    for cmd in wg curl systemctl sudo ssh-keygen; do
        if ! command -v "$cmd" &> /dev/null; then
            missing_deps+=("$cmd")
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo -e "${RED}‚ùå D√©pendances manquantes:${NC}"
        for dep in "${missing_deps[@]}"; do
            echo "   - $dep"
        done
        echo -e "\n${YELLOW}Installation des d√©pendances...${NC}"
        
        if command -v apt &> /dev/null; then
            sudo apt update && sudo apt install -y wireguard curl openssh-client
        elif command -v yum &> /dev/null; then
            sudo yum install -y wireguard-tools curl openssh-clients
        elif command -v dnf &> /dev/null; then
            sudo dnf install -y wireguard-tools curl openssh-clients
        else
            echo -e "${RED}‚ùå Gestionnaire de paquets non reconnu${NC}"
            exit 1
        fi
    fi
}

# V√©rification de WireGuard
check_wireguard() {
    if ! command -v wg &> /dev/null; then
        echo -e "${RED}‚ùå WireGuard n'est pas install√©${NC}"
        echo "   Installation en cours..."
        if command -v apt &> /dev/null; then
            sudo apt update && sudo apt install -y wireguard
        elif command -v yum &> /dev/null; then
            sudo yum install -y wireguard-tools
        elif command -v dnf &> /dev/null; then
            sudo dnf install -y wireguard-tools
        fi
    else
        echo -e "${GREEN}‚úÖ WireGuard d√©tect√©${NC}"
    fi
}

# Configuration du serveur
setup_server() {
    print_section "CONFIGURATION DU SERVEUR"
    
    # V√©rifier si WireGuard est d√©j√† configur√©
    if systemctl is-active --quiet wg-quick@wg0; then
        echo -e "${YELLOW}‚ö†Ô∏è WireGuard est d√©j√† actif sur ce serveur${NC}"
        read -p "Voulez-vous le reconfigurer ? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            return 0
        fi
        sudo systemctl stop wg-quick@wg0
    fi
    
    # Ex√©cuter le script de configuration serveur
    echo "üöÄ Configuration du serveur WireGuard..."
    ./wireguard_control.sh
    
    # Attendre que l'utilisateur configure le serveur
    echo -e "\n${YELLOW}‚ö†Ô∏è Veuillez configurer le serveur via le menu WireGuard Control${NC}"
    echo "   Appuyez sur ENTR√âE quand c'est fait..."
    read
    
    # V√©rifier que le serveur est actif
    if systemctl is-active --quiet wg-quick@wg0; then
        echo -e "${GREEN}‚úÖ Serveur WireGuard configur√© et actif${NC}"
        return 0
    else
        echo -e "${RED}‚ùå √âchec de la configuration du serveur${NC}"
        return 1
    fi
}

# Configuration du client
setup_client() {
    print_section "CONFIGURATION DU CLIENT"
    
    # Demander les informations de connexion
    echo -e "${WHITE}Informations du serveur:${NC}"
    read -p "Adresse IP ou domaine du serveur : " SERVER_IP
    read -p "Port du serveur [51820] : " SERVER_PORT
    SERVER_PORT=${SERVER_PORT:-51820}
    
    echo -e "\n${WHITE}Cl√© publique du serveur:${NC}"
    echo "   (Copiez la cl√© affich√©e par le serveur)"
    read -p "> " SERVER_PUBKEY
    
    # V√©rifier que la cl√© est valide
    if [[ ${#SERVER_PUBKEY} -lt 40 ]]; then
        echo -e "${RED}‚ùå Cl√© publique invalide${NC}"
        return 1
    fi
    
    # Trouver une IP disponible
    echo -e "\n${WHITE}IP du client dans le r√©seau VPN:${NC}"
    echo "   (10.99.99.2 √† 10.99.99.254)"
    read -p "IP client [10.99.99.2] : " CLIENT_IP
    CLIENT_IP=${CLIENT_IP:-10.99.99.2}
    
    # Configuration automatique du client
    echo "üöÄ Configuration automatique du client..."
    ./wg-client-setup.sh auto "$SERVER_IP" "$SERVER_PORT" "$SERVER_PUBKEY" "$CLIENT_IP"
    
    if [[ $? -eq 0 ]]; then
        echo -e "\n${GREEN}‚úÖ Client WireGuard configur√© avec succ√®s${NC}"
        
        # Test de connectivit√©
        echo -e "\n${WHITE}üß™ Test de connectivit√©...${NC}"
        sleep 3
        if ping -c 3 -W 5 10.99.99.1 &> /dev/null; then
            echo -e "${GREEN}‚úÖ Connexion VPN √©tablie${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è Connexion VPN non √©tablie - v√©rifiez la configuration${NC}"
        fi
    else
        echo -e "${RED}‚ùå √âchec de la configuration du client${NC}"
        return 1
    fi
}

# Menu principal
show_menu() {
    while true; do
        clear
        print_header
        
        echo -e "${WHITE}Mode de d√©ploiement:${NC}"
        echo "1. üñ•Ô∏è  Configurer ce serveur WireGuard"
        echo "2. üíª Configurer ce client WireGuard"
        echo "3. üîß V√©rifier l'√©tat des services"
        echo "4. üìã Afficher les informations de connexion"
        echo "5. ‚ùå Quitter"
        echo ""
        read -p "Choix : " choice

        case $choice in
            1) setup_server ;;
            2) setup_client ;;
            3)
                print_section "√âTAT DES SERVICES"
                if systemctl is-active --quiet wg-quick@wg0; then
                    echo -e "${GREEN}‚úÖ WireGuard: ACTIF${NC}"
                    echo -e "${WHITE}Clients connect√©s:${NC}"
                    sudo wg show wg0 | grep -E "(peer:|latest handshake:|transfer:)" || echo "Aucun client"
                else
                    echo -e "${RED}‚ùå WireGuard: INACTIF${NC}"
                fi
                ;;
            4)
                print_section "INFORMATIONS DE CONNEXION"
                if [[ -f /etc/wireguard/keys/server.pub ]]; then
                    echo -e "${WHITE}Cl√© publique serveur:${NC}"
                    sudo cat /etc/wireguard/keys/server.pub
                    echo -e "\n${WHITE}Endpoint:${NC} $(curl -s ifconfig.me):51820"
                    echo -e "${WHITE}R√©seau VPN:${NC} 10.99.99.0/24"
                else
                    echo -e "${YELLOW}‚ö†Ô∏è Serveur non configur√©${NC}"
                fi
                ;;
            5) exit 0 ;;
            *) echo -e "${RED}‚ùå Option invalide${NC}" ;;
        esac
        
        [[ $choice != "5" ]] && { echo ""; read -p "Appuyez sur ENTR√âE pour continuer..."; }
    done
}

# V√©rification des permissions
check_permissions() {
    # V√©rifier que sudo est disponible
    if ! command -v sudo &> /dev/null; then
        echo -e "${RED}‚ùå sudo n'est pas install√©${NC}"
        echo "   Installez sudo ou ex√©cutez en tant que root"
        exit 1
    fi
    
    # Tester si sudo fonctionne (demandera le mot de passe si n√©cessaire)
    echo -e "${YELLOW}üîê V√©rification des privil√®ges sudo...${NC}"
    if ! sudo -v; then
        echo -e "${RED}‚ùå Impossible d'obtenir les privil√®ges sudo${NC}"
        echo "   V√©rifiez votre configuration sudo"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Privil√®ges sudo confirm√©s${NC}"
}

# Main
main() {
    print_header
    echo -e "${WHITE}V√©rification de l'environnement...${NC}"
    
    check_permissions
    check_deps
    check_wireguard
    
    echo -e "${GREEN}‚úÖ Environnement pr√™t${NC}"
    echo ""
    
    show_menu
}

# Ex√©cution
main "$@"
