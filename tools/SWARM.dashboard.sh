#!/bin/bash
################################################################################
# Author: Fred (support@qo-op.com)
# Version: 0.1
# License: AGPL-3.0 (https://choosealicense.com/licenses/agpl-3.0/)
################################################################################
# SWARM.dashboard.sh
# Tableau de bord des abonnements et revenus SWARM
################################################################################
MY_PATH="`dirname \"$0\"`"              # relative
MY_PATH="`( cd \"$MY_PATH\" && pwd )`"  # absolutized and normalized
. "${MY_PATH}/my.sh"
################################################################################

# V√©rifier le niveau Y
if [[ ! -s ~/.zen/game/id_ssh.pub ]]; then
    echo "‚ùå ACC√àS REFUS√â : Niveau Y requis"
    exit 1
fi

clear
echo "üåê TABLEAU DE BORD SWARM"
echo "========================="
echo "üè† Node: ${IPFSNODEID}"
echo "üë®‚Äç‚úàÔ∏è Captain: ${CAPTAINEMAIL:-"N/A"}"
echo "üìÖ $(date)"
echo

# Fonction d'affichage des abonnements re√ßus
show_received_subscriptions() {
    echo "üì® ABONNEMENTS RE√áUS (Revenus)"
    echo "==============================="
    
    local total_revenue_g1=0
    local active_count=0
    local expired_count=0
    
    if [[ ! -d ~/.zen/game/swarm_subscriptions ]]; then
        echo "‚ÑπÔ∏è  Aucun abonnement re√ßu pour le moment"
        return
    fi
    
    for sub_file in ~/.zen/game/swarm_subscriptions/*.subscription; do
        [[ ! -f "$sub_file" ]] && continue
        
        source "$sub_file"
        
        local status_icon="‚úÖ"
        local status_color="\033[92m"
        local today=$(date -u +"%Y%m%d")
        
        if [[ "$EXPIRY" < "$today" ]] || [[ "$STATUS" != "ACTIVE" ]]; then
            status_icon="‚è∞"
            status_color="\033[91m"
            ((expired_count++))
        else
            ((active_count++))
            total_revenue_g1=$(echo "$total_revenue_g1 + $AMOUNT_G1" | bc -l)
        fi
        
        echo -e "${status_color}${status_icon} $SUBSCRIBER_NODEID\033[0m"
        echo -e "  ‚îú‚îÄ üîñ Service: $SERVICE_TYPE"
        echo -e "  ‚îú‚îÄ üí∞ Montant: $AMOUNT_G1 G1 ($AMOUNT_ZEN ·∫ê)"
        echo -e "  ‚îú‚îÄ ‚è∞ Expire: $(date -d "$EXPIRY" "+%d/%m/%Y" 2>/dev/null || echo "$EXPIRY")"
        echo -e "  ‚îî‚îÄ üìä Statut: $STATUS"
        echo
    done
    
    echo "üìä R√âSUM√â REVENUS:"
    echo "‚îú‚îÄ ‚úÖ Actifs: $active_count abonnements"
    echo "‚îú‚îÄ ‚è∞ Expir√©s: $expired_count abonnements"
    echo "‚îú‚îÄ üí∞ Revenus mensuels: $total_revenue_g1 G1"
    echo "‚îî‚îÄ üíé Revenus en ·∫êen: $(echo "$total_revenue_g1 * 10" | bc | cut -d '.' -f 1) ·∫ê"
    echo
}

# Fonction d'affichage des abonnements √©mis
show_sent_subscriptions() {
    echo "üì§ ABONNEMENTS √âMIS (D√©penses)"
    echo "==============================="
    
    local total_expenses_g1=0
    local active_subs=0
    
    if [[ ! -f ~/.zen/game/subscriptions/history.txt ]]; then
        echo "‚ÑπÔ∏è  Aucun abonnement √©mis pour le moment"
        return
    fi
    
    while IFS='|' read -r timestamp nodeid hostname service_type amount g1pub status; do
        [[ -z "$timestamp" ]] && continue
        
        local date_str=$(date -d "@$timestamp" "+%d/%m/%Y %H:%M" 2>/dev/null || echo "Date inconnue")
        local status_icon="‚úÖ"
        
        if [[ "$status" == "ACTIVE" ]]; then
            ((active_subs++))
            total_expenses_g1=$(echo "$total_expenses_g1 + ($amount / 10)" | bc -l)
        fi
        
        echo -e "$status_icon $hostname ($nodeid)"
        echo -e "  ‚îú‚îÄ üîñ Service: $service_type"
        echo -e "  ‚îú‚îÄ üí∏ Co√ªt: $amount ·∫ê ($(echo "scale=1; $amount/10" | bc) G1)"
        echo -e "  ‚îú‚îÄ üìÖ Souscrit: $date_str"
        echo -e "  ‚îî‚îÄ üéØ G1PUB: ${g1pub:0:20}..."
        echo
    done < ~/.zen/game/subscriptions/history.txt
    
    echo "üìä R√âSUM√â D√âPENSES:"
    echo "‚îú‚îÄ üì§ Abonnements actifs: $active_subs"
    echo "‚îú‚îÄ üí∏ D√©penses mensuelles: $total_expenses_g1 G1"
    echo "‚îî‚îÄ üíé D√©penses en ·∫êen: $(echo "$total_expenses_g1 * 10" | bc | cut -d '.' -f 1) ·∫ê"
    echo
}

# Fonction d'affichage du bilan √©conomique
show_economic_balance() {
    echo "üí∞ BILAN √âCONOMIQUE"
    echo "==================="
    
    # Calculer les revenus des abonnements
    local monthly_revenue=0
    if [[ -d ~/.zen/game/swarm_subscriptions ]]; then
        for sub_file in ~/.zen/game/swarm_subscriptions/*.subscription; do
            [[ ! -f "$sub_file" ]] && continue
            source "$sub_file"
            
            local today=$(date -u +"%Y%m%d")
            if [[ "$EXPIRY" >= "$today" && "$STATUS" == "ACTIVE" ]]; then
                monthly_revenue=$(echo "$monthly_revenue + $AMOUNT_G1" | bc -l)
            fi
        done
    fi
    
    # Calculer les d√©penses d'abonnements
    local monthly_expenses=0
    if [[ -f ~/.zen/game/subscriptions/history.txt ]]; then
        while IFS='|' read -r timestamp nodeid hostname service_type amount g1pub status; do
            [[ -z "$timestamp" || "$status" != "ACTIVE" ]] && continue
            monthly_expenses=$(echo "$monthly_expenses + ($amount / 10)" | bc -l)
        done < ~/.zen/game/subscriptions/history.txt
    fi
    
    # R√©cup√©rer la PAF et le bilan du JSON
    local json_file="$HOME/.zen/tmp/${IPFSNODEID}/12345.json"
    local paf=56
    local current_bilan=0
    if [[ -s $json_file ]]; then
        paf=$(jq -r '.PAF // 56' $json_file)
        current_bilan=$(jq -r '.BILAN // 0' $json_file)
    fi
    
    # Calculs
    local paf_monthly=$(echo "$paf" | bc)
    local net_swarm_income=$(echo "$monthly_revenue - $monthly_expenses" | bc -l)
    local total_monthly_income=$(echo "$net_swarm_income" | bc -l)
    
    # D√©terminer le statut √©conomique avec revenus SWARM
    local status_icon="üî¥"
    local status_text="D√©ficitaire"
    local status_color="\033[91m"
    
    if [[ $(echo "$total_monthly_income >= $paf_monthly" | bc -l) -eq 1 ]]; then
        if [[ $(echo "$total_monthly_income >= ($paf_monthly * 3)" | bc -l) -eq 1 ]]; then
            status_icon="üåü"
            status_text="Exc√©dentaire (UPlanet)"
            status_color="\033[92m"
        else
            status_icon="üü°"
            status_text="Rentable (Captain pay√©)"
            status_color="\033[93m"
        fi
    fi
    
    echo "üìä REVENUS MENSUELS:"
    echo "‚îú‚îÄ üåê Abonnements SWARM re√ßus: $monthly_revenue G1"
    echo "‚îú‚îÄ üì§ Abonnements SWARM √©mis: -$monthly_expenses G1"
    echo "‚îî‚îÄ üíé Net SWARM: $(printf "%.2f" $net_swarm_income) G1"
    echo
    echo "üìä BILAN GLOBAL:"
    echo "‚îú‚îÄ üìä PAF mensuelle: $paf_monthly G1"
    echo "‚îú‚îÄ üí∞ Bilan actuel: $current_bilan ·∫ê"
    echo "‚îú‚îÄ üåê Revenus SWARM nets: $(printf "%.2f" $total_monthly_income) G1"
    echo -e "‚îî‚îÄ ${status_color}$status_icon Statut: $status_text\033[0m"
    echo
    
    # Projections
    if [[ $(echo "$total_monthly_income > 0" | bc -l) -eq 1 ]]; then
        local captain_share=0
        local uplanet_share=0
        
        if [[ $(echo "$total_monthly_income > $paf_monthly" | bc -l) -eq 1 ]]; then
            local surplus=$(echo "$total_monthly_income - $paf_monthly" | bc -l)
            
            if [[ $(echo "$surplus <= ($paf_monthly * 2)" | bc -l) -eq 1 ]]; then
                captain_share=$surplus
            else
                captain_share=$(echo "$paf_monthly * 2" | bc -l)
                uplanet_share=$(echo "$surplus - $captain_share" | bc -l)
            fi
        fi
        
        echo "üéØ PROJECTIONS (avec revenus SWARM):"
        echo "‚îú‚îÄ ‚ô•Ô∏è BOX (PAF): $paf_monthly G1"
        echo "‚îú‚îÄ üë®‚Äç‚úàÔ∏è Captain: $(printf "%.2f" $captain_share) G1"
        echo "‚îî‚îÄ üåç UPlanet: $(printf "%.2f" $uplanet_share) G1"
    fi
}

# Fonction d'affichage des services disponibles
show_available_services() {
    echo "üõ†Ô∏è  SERVICES DISPONIBLES"
    echo "========================"
    
    local services_count=0
    
    for service_script in ~/.zen/tmp/${IPFSNODEID}/x_*.sh; do
        [[ ! -f "$service_script" ]] && continue
        
        local service_name=$(basename "$service_script")
        local service_type=${service_name#x_}
        service_type=${service_type%.sh}
        
        case $service_type in
            "ssh") echo "üîê SSH Terminal distant" ;;
            "ollama") echo "ü§ñ Ollama IA (LLM)" ;;
            "comfyui") echo "üé® ComfyUI (IA Images)" ;;
            "perplexica") echo "üîç Perplexica (Recherche IA)" ;;
            "orpheus") echo "üéµ Orpheus (Text-to-Speech)" ;;
            *) echo "‚öôÔ∏è  $service_type" ;;
        esac
        ((services_count++))
    done
    
    [[ $services_count -eq 0 ]] && echo "‚ÑπÔ∏è  Aucun service P2P actif"
    echo "üìä Total: $services_count services disponibles"
    echo
}

# Menu principal
while true; do
    show_received_subscriptions
    show_sent_subscriptions
    show_economic_balance
    show_available_services
    
    echo "üéõÔ∏è  ACTIONS DISPONIBLES"
    echo "======================="
    echo "1) üîÑ Actualiser le tableau de bord"
    echo "2) üåê D√©couvrir les services SWARM"
    echo "3) ‚è∞ V√©rifier les expirations"
    echo "4) üìã Exporter le rapport"
    echo "5) üö™ Quitter"
    echo
    
    read -p "Votre choix (1-5): " choice
    
    case $choice in
        1)
            clear
            echo "üîÑ Actualisation..."
            ;;
        2)
            ${MY_PATH}/../RUNTIME/SWARM.services.sh
            clear
            ;;
        3)
            echo "‚è∞ V√©rification des expirations..."
            [[ -x ~/.zen/game/swarm_check_expiry.sh ]] && ~/.zen/game/swarm_check_expiry.sh
            echo "Appuyez sur Entr√©e pour continuer..."
            read
            clear
            ;;
        4)
            local report_file="$HOME/.zen/tmp/swarm_report_$(date -u +%Y%m%d_%H%M%S).txt"
            {
                echo "RAPPORT SWARM - $(date)"
                echo "======================"
                show_received_subscriptions
                show_sent_subscriptions
                show_economic_balance
                show_available_services
            } > "$report_file"
            echo "üìã Rapport export√© vers: $report_file"
            echo "Appuyez sur Entr√©e pour continuer..."
            read
            clear
            ;;
        5)
            echo "üëã Au revoir !"
            exit 0
            ;;
        *)
            echo "‚ùå Choix invalide"
            sleep 2
            clear
            ;;
    esac
done 